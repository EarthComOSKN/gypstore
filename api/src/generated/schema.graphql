### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Address {
  Address: String!
  createdAt: DateTime!
  customer: User!
  id: ID!
  invoices(after: String, before: String, first: Int, last: Int, orderBy: InvoiceOrderByInput, skip: Int, where: InvoiceWhereInput): [Invoice!]
  name: String!
  shipping(after: String, before: String, first: Int, last: Int, orderBy: ShippingOrderByInput, skip: Int, where: ShippingWhereInput): [Shipping!]
  updatedAt: DateTime!
}

type AddressConnection {
  aggregate: AggregateAddress!
  edges: [AddressEdge!]!
  pageInfo: PageInfo!
}

input AddressCreateInput {
  Address: String!
  customer: UserCreateOneWithoutAddressesInput!
  id: ID
  invoices: InvoiceCreateManyWithoutAddressInput
  name: String!
  shipping: ShippingCreateManyWithoutAddressInput
}

input AddressCreateManyWithoutCustomerInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCustomerInput!]
}

input AddressCreateOneWithoutInvoicesInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutInvoicesInput
}

input AddressCreateOneWithoutShippingInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutShippingInput
}

input AddressCreateWithoutCustomerInput {
  Address: String!
  id: ID
  invoices: InvoiceCreateManyWithoutAddressInput
  name: String!
  shipping: ShippingCreateManyWithoutAddressInput
}

input AddressCreateWithoutInvoicesInput {
  Address: String!
  customer: UserCreateOneWithoutAddressesInput!
  id: ID
  name: String!
  shipping: ShippingCreateManyWithoutAddressInput
}

input AddressCreateWithoutShippingInput {
  Address: String!
  customer: UserCreateOneWithoutAddressesInput!
  id: ID
  invoices: InvoiceCreateManyWithoutAddressInput
  name: String!
}

type AddressEdge {
  cursor: String!
  node: Address!
}

enum AddressOrderByInput {
  Address_ASC
  Address_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AddressScalarWhereInput {
  Address: String
  Address_contains: String
  Address_ends_with: String
  Address_gt: String
  Address_gte: String
  Address_in: [String!]
  Address_lt: String
  Address_lte: String
  Address_not: String
  Address_not_contains: String
  Address_not_ends_with: String
  Address_not_in: [String!]
  Address_not_starts_with: String
  Address_starts_with: String
  AND: [AddressScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AddressUpdateInput {
  Address: String
  customer: UserUpdateOneRequiredWithoutAddressesInput
  invoices: InvoiceUpdateManyWithoutAddressInput
  name: String
  shipping: ShippingUpdateManyWithoutAddressInput
}

input AddressUpdateManyDataInput {
  Address: String
  name: String
}

input AddressUpdateManyMutationInput {
  Address: String
  name: String
}

input AddressUpdateManyWithoutCustomerInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCustomerInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutCustomerInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  data: AddressUpdateManyDataInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateOneRequiredWithoutShippingInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutShippingInput
  update: AddressUpdateWithoutShippingDataInput
  upsert: AddressUpsertWithoutShippingInput
}

input AddressUpdateOneWithoutInvoicesInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutInvoicesInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutInvoicesDataInput
  upsert: AddressUpsertWithoutInvoicesInput
}

input AddressUpdateWithoutCustomerDataInput {
  Address: String
  invoices: InvoiceUpdateManyWithoutAddressInput
  name: String
  shipping: ShippingUpdateManyWithoutAddressInput
}

input AddressUpdateWithoutInvoicesDataInput {
  Address: String
  customer: UserUpdateOneRequiredWithoutAddressesInput
  name: String
  shipping: ShippingUpdateManyWithoutAddressInput
}

input AddressUpdateWithoutShippingDataInput {
  Address: String
  customer: UserUpdateOneRequiredWithoutAddressesInput
  invoices: InvoiceUpdateManyWithoutAddressInput
  name: String
}

input AddressUpdateWithWhereUniqueWithoutCustomerInput {
  data: AddressUpdateWithoutCustomerDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutInvoicesInput {
  create: AddressCreateWithoutInvoicesInput!
  update: AddressUpdateWithoutInvoicesDataInput!
}

input AddressUpsertWithoutShippingInput {
  create: AddressCreateWithoutShippingInput!
  update: AddressUpdateWithoutShippingDataInput!
}

input AddressUpsertWithWhereUniqueWithoutCustomerInput {
  create: AddressCreateWithoutCustomerInput!
  update: AddressUpdateWithoutCustomerDataInput!
  where: AddressWhereUniqueInput!
}

input AddressWhereInput {
  Address: String
  Address_contains: String
  Address_ends_with: String
  Address_gt: String
  Address_gte: String
  Address_in: [String!]
  Address_lt: String
  Address_lte: String
  Address_not: String
  Address_not_contains: String
  Address_not_ends_with: String
  Address_not_in: [String!]
  Address_not_starts_with: String
  Address_starts_with: String
  AND: [AddressWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  invoices_every: InvoiceWhereInput
  invoices_none: InvoiceWhereInput
  invoices_some: InvoiceWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  shipping_every: ShippingWhereInput
  shipping_none: ShippingWhereInput
  shipping_some: ShippingWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePayment {
  count: Int!
}

type AggregateProductItem {
  count: Int!
}

type AggregateQuotation {
  count: Int!
}

type AggregateQuotationItem {
  count: Int!
}

type AggregateSalesman {
  count: Int!
}

type AggregateShipping {
  count: Int!
}

type AggregateShoppingCart {
  count: Int!
}

type AggregateShoppingCartItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  category: Category
  createdAt: DateTime!
  id: ID!
  name: String!
  productItem(after: String, before: String, first: Int, last: Int, orderBy: ProductItemOrderByInput, skip: Int, where: ProductItemWhereInput): [ProductItem!]
  updatedAt: DateTime!
}

type CategoryConnection {
  aggregate: AggregateCategory!
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

input CategoryCreateInput {
  category: CategoryCreateOneInput
  id: ID
  name: String!
  productItem: ProductItemCreateManyWithoutCategoryInput
}

input CategoryCreateOneInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateInput
}

input CategoryCreateOneWithoutProductItemInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutProductItemInput
}

input CategoryCreateWithoutProductItemInput {
  category: CategoryCreateOneInput
  id: ID
  name: String!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

enum CategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CategoryUpdateDataInput {
  category: CategoryUpdateOneInput
  name: String
  productItem: ProductItemUpdateManyWithoutCategoryInput
}

input CategoryUpdateInput {
  category: CategoryUpdateOneInput
  name: String
  productItem: ProductItemUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpdateOneRequiredWithoutProductItemInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutProductItemInput
  update: CategoryUpdateWithoutProductItemDataInput
  upsert: CategoryUpsertWithoutProductItemInput
}

input CategoryUpdateWithoutProductItemDataInput {
  category: CategoryUpdateOneInput
  name: String
}

input CategoryUpsertNestedInput {
  create: CategoryCreateInput!
  update: CategoryUpdateDataInput!
}

input CategoryUpsertWithoutProductItemInput {
  create: CategoryCreateWithoutProductItemInput!
  update: CategoryUpdateWithoutProductItemDataInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  category: CategoryWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  productItem_every: ProductItemWhereInput
  productItem_none: ProductItemWhereInput
  productItem_some: ProductItemWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Invoice {
  address: Address
  createdAt: DateTime!
  creditTerm: String!
  docId: String!
  id: ID!
  order: Order!
  payment: Payment
  salesman: Salesman!
  updatedAt: DateTime!
  user: User!
}

type InvoiceConnection {
  aggregate: AggregateInvoice!
  edges: [InvoiceEdge!]!
  pageInfo: PageInfo!
}

input InvoiceCreateInput {
  address: AddressCreateOneWithoutInvoicesInput
  creditTerm: String!
  docId: String!
  id: ID
  order: OrderCreateOneInput!
  payment: PaymentCreateOneWithoutInvoiceInput
  salesman: SalesmanCreateOneWithoutInvoicesInput!
  user: UserCreateOneInput!
}

input InvoiceCreateManyWithoutAddressInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutAddressInput!]
}

input InvoiceCreateManyWithoutSalesmanInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutSalesmanInput!]
}

input InvoiceCreateOneInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateInput
}

input InvoiceCreateOneWithoutPaymentInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutPaymentInput
}

input InvoiceCreateWithoutAddressInput {
  creditTerm: String!
  docId: String!
  id: ID
  order: OrderCreateOneInput!
  payment: PaymentCreateOneWithoutInvoiceInput
  salesman: SalesmanCreateOneWithoutInvoicesInput!
  user: UserCreateOneInput!
}

input InvoiceCreateWithoutPaymentInput {
  address: AddressCreateOneWithoutInvoicesInput
  creditTerm: String!
  docId: String!
  id: ID
  order: OrderCreateOneInput!
  salesman: SalesmanCreateOneWithoutInvoicesInput!
  user: UserCreateOneInput!
}

input InvoiceCreateWithoutSalesmanInput {
  address: AddressCreateOneWithoutInvoicesInput
  creditTerm: String!
  docId: String!
  id: ID
  order: OrderCreateOneInput!
  payment: PaymentCreateOneWithoutInvoiceInput
  user: UserCreateOneInput!
}

type InvoiceEdge {
  cursor: String!
  node: Invoice!
}

enum InvoiceOrderByInput {
  createdAt_ASC
  createdAt_DESC
  creditTerm_ASC
  creditTerm_DESC
  docId_ASC
  docId_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InvoiceScalarWhereInput {
  AND: [InvoiceScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  creditTerm: String
  creditTerm_contains: String
  creditTerm_ends_with: String
  creditTerm_gt: String
  creditTerm_gte: String
  creditTerm_in: [String!]
  creditTerm_lt: String
  creditTerm_lte: String
  creditTerm_not: String
  creditTerm_not_contains: String
  creditTerm_not_ends_with: String
  creditTerm_not_in: [String!]
  creditTerm_not_starts_with: String
  creditTerm_starts_with: String
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [InvoiceScalarWhereInput!]
  OR: [InvoiceScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input InvoiceUpdateDataInput {
  address: AddressUpdateOneWithoutInvoicesInput
  creditTerm: String
  docId: String
  order: OrderUpdateOneRequiredInput
  payment: PaymentUpdateOneWithoutInvoiceInput
  salesman: SalesmanUpdateOneRequiredWithoutInvoicesInput
  user: UserUpdateOneRequiredInput
}

input InvoiceUpdateInput {
  address: AddressUpdateOneWithoutInvoicesInput
  creditTerm: String
  docId: String
  order: OrderUpdateOneRequiredInput
  payment: PaymentUpdateOneWithoutInvoiceInput
  salesman: SalesmanUpdateOneRequiredWithoutInvoicesInput
  user: UserUpdateOneRequiredInput
}

input InvoiceUpdateManyDataInput {
  creditTerm: String
  docId: String
}

input InvoiceUpdateManyMutationInput {
  creditTerm: String
  docId: String
}

input InvoiceUpdateManyWithoutAddressInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutAddressInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutAddressInput!]
}

input InvoiceUpdateManyWithoutSalesmanInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutSalesmanInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutSalesmanInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutSalesmanInput!]
}

input InvoiceUpdateManyWithWhereNestedInput {
  data: InvoiceUpdateManyDataInput!
  where: InvoiceScalarWhereInput!
}

input InvoiceUpdateOneRequiredInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateInput
  update: InvoiceUpdateDataInput
  upsert: InvoiceUpsertNestedInput
}

input InvoiceUpdateOneWithoutPaymentInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutPaymentInput
  delete: Boolean
  disconnect: Boolean
  update: InvoiceUpdateWithoutPaymentDataInput
  upsert: InvoiceUpsertWithoutPaymentInput
}

input InvoiceUpdateWithoutAddressDataInput {
  creditTerm: String
  docId: String
  order: OrderUpdateOneRequiredInput
  payment: PaymentUpdateOneWithoutInvoiceInput
  salesman: SalesmanUpdateOneRequiredWithoutInvoicesInput
  user: UserUpdateOneRequiredInput
}

input InvoiceUpdateWithoutPaymentDataInput {
  address: AddressUpdateOneWithoutInvoicesInput
  creditTerm: String
  docId: String
  order: OrderUpdateOneRequiredInput
  salesman: SalesmanUpdateOneRequiredWithoutInvoicesInput
  user: UserUpdateOneRequiredInput
}

input InvoiceUpdateWithoutSalesmanDataInput {
  address: AddressUpdateOneWithoutInvoicesInput
  creditTerm: String
  docId: String
  order: OrderUpdateOneRequiredInput
  payment: PaymentUpdateOneWithoutInvoiceInput
  user: UserUpdateOneRequiredInput
}

input InvoiceUpdateWithWhereUniqueWithoutAddressInput {
  data: InvoiceUpdateWithoutAddressDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutSalesmanInput {
  data: InvoiceUpdateWithoutSalesmanDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertNestedInput {
  create: InvoiceCreateInput!
  update: InvoiceUpdateDataInput!
}

input InvoiceUpsertWithoutPaymentInput {
  create: InvoiceCreateWithoutPaymentInput!
  update: InvoiceUpdateWithoutPaymentDataInput!
}

input InvoiceUpsertWithWhereUniqueWithoutAddressInput {
  create: InvoiceCreateWithoutAddressInput!
  update: InvoiceUpdateWithoutAddressDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutSalesmanInput {
  create: InvoiceCreateWithoutSalesmanInput!
  update: InvoiceUpdateWithoutSalesmanDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceWhereInput {
  address: AddressWhereInput
  AND: [InvoiceWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  creditTerm: String
  creditTerm_contains: String
  creditTerm_ends_with: String
  creditTerm_gt: String
  creditTerm_gte: String
  creditTerm_in: [String!]
  creditTerm_lt: String
  creditTerm_lte: String
  creditTerm_not: String
  creditTerm_not_contains: String
  creditTerm_not_ends_with: String
  creditTerm_not_in: [String!]
  creditTerm_not_starts_with: String
  creditTerm_starts_with: String
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  order: OrderWhereInput
  payment: PaymentWhereInput
  salesman: SalesmanWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

scalar Long

type Me {
  token: String!
  user: User!
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createCategory(data: CategoryCreateInput!): Category!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createOrder(data: OrderCreateInput!): Order!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createPayment(data: PaymentCreateInput!): Payment!
  createProductItem(data: ProductItemCreateInput!): ProductItem!
  createQuotation(data: QuotationCreateInput!): Quotation!
  createQuotationItem(data: QuotationItemCreateInput!): QuotationItem!
  createSalesman(data: SalesmanCreateInput!): Salesman!
  createShipping(data: ShippingCreateInput!): Shipping!
  createShoppingCart(data: ShoppingCartCreateInput!): ShoppingCart!
  createShoppingCartItem(data: ShoppingCartItemCreateInput!): ShoppingCartItem!
  createUser(data: UserCreateInput!): User!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  deleteManyProductItems(where: ProductItemWhereInput): BatchPayload!
  deleteManyQuotationItems(where: QuotationItemWhereInput): BatchPayload!
  deleteManyQuotations(where: QuotationWhereInput): BatchPayload!
  deleteManySalesmen(where: SalesmanWhereInput): BatchPayload!
  deleteManyShippings(where: ShippingWhereInput): BatchPayload!
  deleteManyShoppingCartItems(where: ShoppingCartItemWhereInput): BatchPayload!
  deleteManyShoppingCarts(where: ShoppingCartWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deleteProductItem(where: ProductItemWhereUniqueInput!): ProductItem
  deleteQuotation(where: QuotationWhereUniqueInput!): Quotation
  deleteQuotationItem(where: QuotationItemWhereUniqueInput!): QuotationItem
  deleteSalesman(where: SalesmanWhereUniqueInput!): Salesman
  deleteShipping(where: ShippingWhereUniqueInput!): Shipping
  deleteShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  deleteShoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  deleteUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String): Me
  paymentViaOmise(amount: Int, orderId: ID, token: String, userId: ID): Payment
  register(data: UserCreateInput): Me
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  updateManyProductItems(data: ProductItemUpdateManyMutationInput!, where: ProductItemWhereInput): BatchPayload!
  updateManyQuotationItems(data: QuotationItemUpdateManyMutationInput!, where: QuotationItemWhereInput): BatchPayload!
  updateManyQuotations(data: QuotationUpdateManyMutationInput!, where: QuotationWhereInput): BatchPayload!
  updateManySalesmen(data: SalesmanUpdateManyMutationInput!, where: SalesmanWhereInput): BatchPayload!
  updateManyShippings(data: ShippingUpdateManyMutationInput!, where: ShippingWhereInput): BatchPayload!
  updateManyShoppingCartItems(data: ShoppingCartItemUpdateManyMutationInput!, where: ShoppingCartItemWhereInput): BatchPayload!
  updateManyShoppingCarts(data: ShoppingCartUpdateManyMutationInput!, where: ShoppingCartWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updateProductItem(data: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem
  updateQuotation(data: QuotationUpdateInput!, where: QuotationWhereUniqueInput!): Quotation
  updateQuotationItem(data: QuotationItemUpdateInput!, where: QuotationItemWhereUniqueInput!): QuotationItem
  updateSalesman(data: SalesmanUpdateInput!, where: SalesmanWhereUniqueInput!): Salesman
  updateShipping(data: ShippingUpdateInput!, where: ShippingWhereUniqueInput!): Shipping
  updateShoppingCart(data: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart
  updateShoppingCartItem(data: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  uploadImage(file: String, path: String, type: String): String
  upsertAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertInvoice(create: InvoiceCreateInput!, update: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice!
  upsertOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertOrderItem(create: OrderItemCreateInput!, update: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  upsertPayment(create: PaymentCreateInput!, update: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment!
  upsertProductItem(create: ProductItemCreateInput!, update: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem!
  upsertQuotation(create: QuotationCreateInput!, update: QuotationUpdateInput!, where: QuotationWhereUniqueInput!): Quotation!
  upsertQuotationItem(create: QuotationItemCreateInput!, update: QuotationItemUpdateInput!, where: QuotationItemWhereUniqueInput!): QuotationItem!
  upsertSalesman(create: SalesmanCreateInput!, update: SalesmanUpdateInput!, where: SalesmanWhereUniqueInput!): Salesman!
  upsertShipping(create: ShippingCreateInput!, update: ShippingUpdateInput!, where: ShippingWhereUniqueInput!): Shipping!
  upsertShoppingCart(create: ShoppingCartCreateInput!, update: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart!
  upsertShoppingCartItem(create: ShoppingCartItemCreateInput!, update: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type OmiseResponse {
  status: String!
}

type Order {
  createdAt: DateTime!
  customer: User!
  docId: String
  id: ID!
  orderItem(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]
  payment: Payment
  quotation: Quotation
  salesman: Salesman
  shipping: Shipping
  shippingStatus: String
  status: String
  updatedAt: DateTime!
}

type OrderConnection {
  aggregate: AggregateOrder!
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
}

input OrderCreateInput {
  customer: UserCreateOneWithoutOrdersInput!
  docId: String
  id: ID
  orderItem: OrderItemCreateManyWithoutOrderInput
  payment: PaymentCreateOneWithoutOrderInput
  quotation: QuotationCreateOneInput
  salesman: SalesmanCreateOneWithoutOrdersInput
  shipping: ShippingCreateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderCreateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
}

input OrderCreateManyWithoutSalesmanInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutSalesmanInput!]
}

input OrderCreateOneInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateInput
}

input OrderCreateOneWithoutOrderItemInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutOrderItemInput
}

input OrderCreateOneWithoutPaymentInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutPaymentInput
}

input OrderCreateOneWithoutShippingInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutShippingInput
}

input OrderCreateWithoutCustomerInput {
  docId: String
  id: ID
  orderItem: OrderItemCreateManyWithoutOrderInput
  payment: PaymentCreateOneWithoutOrderInput
  quotation: QuotationCreateOneInput
  salesman: SalesmanCreateOneWithoutOrdersInput
  shipping: ShippingCreateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderCreateWithoutOrderItemInput {
  customer: UserCreateOneWithoutOrdersInput!
  docId: String
  id: ID
  payment: PaymentCreateOneWithoutOrderInput
  quotation: QuotationCreateOneInput
  salesman: SalesmanCreateOneWithoutOrdersInput
  shipping: ShippingCreateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderCreateWithoutPaymentInput {
  customer: UserCreateOneWithoutOrdersInput!
  docId: String
  id: ID
  orderItem: OrderItemCreateManyWithoutOrderInput
  quotation: QuotationCreateOneInput
  salesman: SalesmanCreateOneWithoutOrdersInput
  shipping: ShippingCreateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderCreateWithoutSalesmanInput {
  customer: UserCreateOneWithoutOrdersInput!
  docId: String
  id: ID
  orderItem: OrderItemCreateManyWithoutOrderInput
  payment: PaymentCreateOneWithoutOrderInput
  quotation: QuotationCreateOneInput
  shipping: ShippingCreateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderCreateWithoutShippingInput {
  customer: UserCreateOneWithoutOrdersInput!
  docId: String
  id: ID
  orderItem: OrderItemCreateManyWithoutOrderInput
  payment: PaymentCreateOneWithoutOrderInput
  quotation: QuotationCreateOneInput
  salesman: SalesmanCreateOneWithoutOrdersInput
  shippingStatus: String
  status: String
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrderItem {
  amount: Int!
  id: ID!
  key: String!
  order: Order!
  product: ProductItem!
  realPrice: Float!
}

type OrderItemConnection {
  aggregate: AggregateOrderItem!
  edges: [OrderItemEdge!]!
  pageInfo: PageInfo!
}

input OrderItemCreateInput {
  amount: Int!
  id: ID
  key: String!
  order: OrderCreateOneWithoutOrderItemInput!
  product: ProductItemCreateOneInput!
  realPrice: Float!
}

input OrderItemCreateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateWithoutOrderInput {
  amount: Int!
  id: ID
  key: String!
  product: ProductItemCreateOneInput!
  realPrice: Float!
}

type OrderItemEdge {
  cursor: String!
  node: OrderItem!
}

enum OrderItemOrderByInput {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  realPrice_ASC
  realPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderItemScalarWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [OrderItemScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  realPrice: Float
  realPrice_gt: Float
  realPrice_gte: Float
  realPrice_in: [Float!]
  realPrice_lt: Float
  realPrice_lte: Float
  realPrice_not: Float
  realPrice_not_in: [Float!]
}

input OrderItemUpdateInput {
  amount: Int
  key: String
  order: OrderUpdateOneRequiredWithoutOrderItemInput
  product: ProductItemUpdateOneRequiredInput
  realPrice: Float
}

input OrderItemUpdateManyDataInput {
  amount: Int
  key: String
  realPrice: Float
}

input OrderItemUpdateManyMutationInput {
  amount: Int
  key: String
  realPrice: Float
}

input OrderItemUpdateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  data: OrderItemUpdateManyDataInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateWithoutOrderDataInput {
  amount: Int
  key: String
  product: ProductItemUpdateOneRequiredInput
  realPrice: Float
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [OrderItemWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  order: OrderWhereInput
  product: ProductItemWhereInput
  realPrice: Float
  realPrice_gt: Float
  realPrice_gte: Float
  realPrice_in: [Float!]
  realPrice_lt: Float
  realPrice_lte: Float
  realPrice_not: Float
  realPrice_not_in: [Float!]
}

input OrderItemWhereUniqueInput {
  id: ID
  key: String
}

enum OrderOrderByInput {
  createdAt_ASC
  createdAt_DESC
  docId_ASC
  docId_DESC
  id_ASC
  id_DESC
  shippingStatus_ASC
  shippingStatus_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  shippingStatus: String
  shippingStatus_contains: String
  shippingStatus_ends_with: String
  shippingStatus_gt: String
  shippingStatus_gte: String
  shippingStatus_in: [String!]
  shippingStatus_lt: String
  shippingStatus_lte: String
  shippingStatus_not: String
  shippingStatus_not_contains: String
  shippingStatus_not_ends_with: String
  shippingStatus_not_in: [String!]
  shippingStatus_not_starts_with: String
  shippingStatus_starts_with: String
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrderUpdateDataInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateManyDataInput {
  docId: String
  shippingStatus: String
  status: String
}

input OrderUpdateManyMutationInput {
  docId: String
  shippingStatus: String
  status: String
}

input OrderUpdateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithoutSalesmanInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutSalesmanInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutSalesmanInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutSalesmanInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateOneInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateInput
  delete: Boolean
  disconnect: Boolean
  update: OrderUpdateDataInput
  upsert: OrderUpsertNestedInput
}

input OrderUpdateOneRequiredInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateInput
  update: OrderUpdateDataInput
  upsert: OrderUpsertNestedInput
}

input OrderUpdateOneRequiredWithoutOrderItemInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutOrderItemInput
  update: OrderUpdateWithoutOrderItemDataInput
  upsert: OrderUpsertWithoutOrderItemInput
}

input OrderUpdateOneRequiredWithoutPaymentInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutPaymentInput
  update: OrderUpdateWithoutPaymentDataInput
  upsert: OrderUpsertWithoutPaymentInput
}

input OrderUpdateOneRequiredWithoutShippingInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutShippingInput
  update: OrderUpdateWithoutShippingDataInput
  upsert: OrderUpsertWithoutShippingInput
}

input OrderUpdateWithoutCustomerDataInput {
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateWithoutOrderItemDataInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateWithoutPaymentDataInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateWithoutSalesmanDataInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  shipping: ShippingUpdateOneWithoutOrderInput
  shippingStatus: String
  status: String
}

input OrderUpdateWithoutShippingDataInput {
  customer: UserUpdateOneRequiredWithoutOrdersInput
  docId: String
  orderItem: OrderItemUpdateManyWithoutOrderInput
  payment: PaymentUpdateOneWithoutOrderInput
  quotation: QuotationUpdateOneInput
  salesman: SalesmanUpdateOneWithoutOrdersInput
  shippingStatus: String
  status: String
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutSalesmanInput {
  data: OrderUpdateWithoutSalesmanDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertNestedInput {
  create: OrderCreateInput!
  update: OrderUpdateDataInput!
}

input OrderUpsertWithoutOrderItemInput {
  create: OrderCreateWithoutOrderItemInput!
  update: OrderUpdateWithoutOrderItemDataInput!
}

input OrderUpsertWithoutPaymentInput {
  create: OrderCreateWithoutPaymentInput!
  update: OrderUpdateWithoutPaymentDataInput!
}

input OrderUpsertWithoutShippingInput {
  create: OrderCreateWithoutShippingInput!
  update: OrderUpdateWithoutShippingDataInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutSalesmanInput {
  create: OrderCreateWithoutSalesmanInput!
  update: OrderUpdateWithoutSalesmanDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  orderItem_every: OrderItemWhereInput
  orderItem_none: OrderItemWhereInput
  orderItem_some: OrderItemWhereInput
  payment: PaymentWhereInput
  quotation: QuotationWhereInput
  salesman: SalesmanWhereInput
  shipping: ShippingWhereInput
  shippingStatus: String
  shippingStatus_contains: String
  shippingStatus_ends_with: String
  shippingStatus_gt: String
  shippingStatus_gte: String
  shippingStatus_in: [String!]
  shippingStatus_lt: String
  shippingStatus_lte: String
  shippingStatus_not: String
  shippingStatus_not_contains: String
  shippingStatus_not_ends_with: String
  shippingStatus_not_in: [String!]
  shippingStatus_not_starts_with: String
  shippingStatus_starts_with: String
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Payment {
  amount: String!
  createdAt: DateTime!
  customer: User!
  docId: String!
  id: ID!
  Invoice: Invoice
  order: Order!
  rawEvent: String
  salesman: Salesman
  updatedAt: DateTime!
}

type PaymentConnection {
  aggregate: AggregatePayment!
  edges: [PaymentEdge!]!
  pageInfo: PageInfo!
}

input PaymentCreateInput {
  amount: String!
  customer: UserCreateOneWithoutPaymentsInput!
  docId: String!
  id: ID
  Invoice: InvoiceCreateOneWithoutPaymentInput
  order: OrderCreateOneWithoutPaymentInput!
  rawEvent: String
  salesman: SalesmanCreateOneWithoutPaymentsInput
}

input PaymentCreateManyWithoutCustomerInput {
  connect: [PaymentWhereUniqueInput!]
  create: [PaymentCreateWithoutCustomerInput!]
}

input PaymentCreateManyWithoutSalesmanInput {
  connect: [PaymentWhereUniqueInput!]
  create: [PaymentCreateWithoutSalesmanInput!]
}

input PaymentCreateOneWithoutInvoiceInput {
  connect: PaymentWhereUniqueInput
  create: PaymentCreateWithoutInvoiceInput
}

input PaymentCreateOneWithoutOrderInput {
  connect: PaymentWhereUniqueInput
  create: PaymentCreateWithoutOrderInput
}

input PaymentCreateWithoutCustomerInput {
  amount: String!
  docId: String!
  id: ID
  Invoice: InvoiceCreateOneWithoutPaymentInput
  order: OrderCreateOneWithoutPaymentInput!
  rawEvent: String
  salesman: SalesmanCreateOneWithoutPaymentsInput
}

input PaymentCreateWithoutInvoiceInput {
  amount: String!
  customer: UserCreateOneWithoutPaymentsInput!
  docId: String!
  id: ID
  order: OrderCreateOneWithoutPaymentInput!
  rawEvent: String
  salesman: SalesmanCreateOneWithoutPaymentsInput
}

input PaymentCreateWithoutOrderInput {
  amount: String!
  customer: UserCreateOneWithoutPaymentsInput!
  docId: String!
  id: ID
  Invoice: InvoiceCreateOneWithoutPaymentInput
  rawEvent: String
  salesman: SalesmanCreateOneWithoutPaymentsInput
}

input PaymentCreateWithoutSalesmanInput {
  amount: String!
  customer: UserCreateOneWithoutPaymentsInput!
  docId: String!
  id: ID
  Invoice: InvoiceCreateOneWithoutPaymentInput
  order: OrderCreateOneWithoutPaymentInput!
  rawEvent: String
}

type PaymentEdge {
  cursor: String!
  node: Payment!
}

enum PaymentOrderByInput {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  docId_ASC
  docId_DESC
  id_ASC
  id_DESC
  rawEvent_ASC
  rawEvent_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PaymentScalarWhereInput {
  amount: String
  amount_contains: String
  amount_ends_with: String
  amount_gt: String
  amount_gte: String
  amount_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_not: String
  amount_not_contains: String
  amount_not_ends_with: String
  amount_not_in: [String!]
  amount_not_starts_with: String
  amount_starts_with: String
  AND: [PaymentScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PaymentScalarWhereInput!]
  OR: [PaymentScalarWhereInput!]
  rawEvent: String
  rawEvent_contains: String
  rawEvent_ends_with: String
  rawEvent_gt: String
  rawEvent_gte: String
  rawEvent_in: [String!]
  rawEvent_lt: String
  rawEvent_lte: String
  rawEvent_not: String
  rawEvent_not_contains: String
  rawEvent_not_ends_with: String
  rawEvent_not_in: [String!]
  rawEvent_not_starts_with: String
  rawEvent_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PaymentUpdateInput {
  amount: String
  customer: UserUpdateOneRequiredWithoutPaymentsInput
  docId: String
  Invoice: InvoiceUpdateOneWithoutPaymentInput
  order: OrderUpdateOneRequiredWithoutPaymentInput
  rawEvent: String
  salesman: SalesmanUpdateOneWithoutPaymentsInput
}

input PaymentUpdateManyDataInput {
  amount: String
  docId: String
  rawEvent: String
}

input PaymentUpdateManyMutationInput {
  amount: String
  docId: String
  rawEvent: String
}

input PaymentUpdateManyWithoutCustomerInput {
  connect: [PaymentWhereUniqueInput!]
  create: [PaymentCreateWithoutCustomerInput!]
  delete: [PaymentWhereUniqueInput!]
  deleteMany: [PaymentScalarWhereInput!]
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [PaymentUpdateManyWithWhereNestedInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutCustomerInput!]
}

input PaymentUpdateManyWithoutSalesmanInput {
  connect: [PaymentWhereUniqueInput!]
  create: [PaymentCreateWithoutSalesmanInput!]
  delete: [PaymentWhereUniqueInput!]
  deleteMany: [PaymentScalarWhereInput!]
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutSalesmanInput!]
  updateMany: [PaymentUpdateManyWithWhereNestedInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutSalesmanInput!]
}

input PaymentUpdateManyWithWhereNestedInput {
  data: PaymentUpdateManyDataInput!
  where: PaymentScalarWhereInput!
}

input PaymentUpdateOneWithoutInvoiceInput {
  connect: PaymentWhereUniqueInput
  create: PaymentCreateWithoutInvoiceInput
  delete: Boolean
  disconnect: Boolean
  update: PaymentUpdateWithoutInvoiceDataInput
  upsert: PaymentUpsertWithoutInvoiceInput
}

input PaymentUpdateOneWithoutOrderInput {
  connect: PaymentWhereUniqueInput
  create: PaymentCreateWithoutOrderInput
  delete: Boolean
  disconnect: Boolean
  update: PaymentUpdateWithoutOrderDataInput
  upsert: PaymentUpsertWithoutOrderInput
}

input PaymentUpdateWithoutCustomerDataInput {
  amount: String
  docId: String
  Invoice: InvoiceUpdateOneWithoutPaymentInput
  order: OrderUpdateOneRequiredWithoutPaymentInput
  rawEvent: String
  salesman: SalesmanUpdateOneWithoutPaymentsInput
}

input PaymentUpdateWithoutInvoiceDataInput {
  amount: String
  customer: UserUpdateOneRequiredWithoutPaymentsInput
  docId: String
  order: OrderUpdateOneRequiredWithoutPaymentInput
  rawEvent: String
  salesman: SalesmanUpdateOneWithoutPaymentsInput
}

input PaymentUpdateWithoutOrderDataInput {
  amount: String
  customer: UserUpdateOneRequiredWithoutPaymentsInput
  docId: String
  Invoice: InvoiceUpdateOneWithoutPaymentInput
  rawEvent: String
  salesman: SalesmanUpdateOneWithoutPaymentsInput
}

input PaymentUpdateWithoutSalesmanDataInput {
  amount: String
  customer: UserUpdateOneRequiredWithoutPaymentsInput
  docId: String
  Invoice: InvoiceUpdateOneWithoutPaymentInput
  order: OrderUpdateOneRequiredWithoutPaymentInput
  rawEvent: String
}

input PaymentUpdateWithWhereUniqueWithoutCustomerInput {
  data: PaymentUpdateWithoutCustomerDataInput!
  where: PaymentWhereUniqueInput!
}

input PaymentUpdateWithWhereUniqueWithoutSalesmanInput {
  data: PaymentUpdateWithoutSalesmanDataInput!
  where: PaymentWhereUniqueInput!
}

input PaymentUpsertWithoutInvoiceInput {
  create: PaymentCreateWithoutInvoiceInput!
  update: PaymentUpdateWithoutInvoiceDataInput!
}

input PaymentUpsertWithoutOrderInput {
  create: PaymentCreateWithoutOrderInput!
  update: PaymentUpdateWithoutOrderDataInput!
}

input PaymentUpsertWithWhereUniqueWithoutCustomerInput {
  create: PaymentCreateWithoutCustomerInput!
  update: PaymentUpdateWithoutCustomerDataInput!
  where: PaymentWhereUniqueInput!
}

input PaymentUpsertWithWhereUniqueWithoutSalesmanInput {
  create: PaymentCreateWithoutSalesmanInput!
  update: PaymentUpdateWithoutSalesmanDataInput!
  where: PaymentWhereUniqueInput!
}

input PaymentWhereInput {
  amount: String
  amount_contains: String
  amount_ends_with: String
  amount_gt: String
  amount_gte: String
  amount_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_not: String
  amount_not_contains: String
  amount_not_ends_with: String
  amount_not_in: [String!]
  amount_not_starts_with: String
  amount_starts_with: String
  AND: [PaymentWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  Invoice: InvoiceWhereInput
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  order: OrderWhereInput
  rawEvent: String
  rawEvent_contains: String
  rawEvent_ends_with: String
  rawEvent_gt: String
  rawEvent_gte: String
  rawEvent_in: [String!]
  rawEvent_lt: String
  rawEvent_lte: String
  rawEvent_not: String
  rawEvent_not_contains: String
  rawEvent_not_ends_with: String
  rawEvent_not_in: [String!]
  rawEvent_not_starts_with: String
  rawEvent_starts_with: String
  salesman: SalesmanWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PaymentWhereUniqueInput {
  id: ID
}

type ProductItem {
  amount: Int!
  brand: String!
  category: Category!
  createdAt: DateTime!
  description: String
  id: ID!
  image: String
  isPublished: Boolean!
  MenuDetail: String!
  name: String!
  order: Order
  price: String!
  relatedProduct(after: String, before: String, first: Int, last: Int, orderBy: ProductItemOrderByInput, skip: Int, where: ProductItemWhereInput): [ProductItem!]
  salePrice: String!
  shoppingCart: ShoppingCart
  TermDetail: String!
  unitType: String!
  updatedAt: DateTime!
}

type ProductItemConnection {
  aggregate: AggregateProductItem!
  edges: [ProductItemEdge!]!
  pageInfo: PageInfo!
}

input ProductItemCreateInput {
  amount: Int!
  brand: String!
  category: CategoryCreateOneWithoutProductItemInput!
  description: String
  id: ID
  image: String
  isPublished: Boolean
  MenuDetail: String!
  name: String!
  order: OrderCreateOneInput
  price: String!
  relatedProduct: ProductItemCreateManyInput
  salePrice: String!
  shoppingCart: ShoppingCartCreateOneInput
  TermDetail: String!
  unitType: String!
}

input ProductItemCreateManyInput {
  connect: [ProductItemWhereUniqueInput!]
  create: [ProductItemCreateInput!]
}

input ProductItemCreateManyWithoutCategoryInput {
  connect: [ProductItemWhereUniqueInput!]
  create: [ProductItemCreateWithoutCategoryInput!]
}

input ProductItemCreateOneInput {
  connect: ProductItemWhereUniqueInput
  create: ProductItemCreateInput
}

input ProductItemCreateWithoutCategoryInput {
  amount: Int!
  brand: String!
  description: String
  id: ID
  image: String
  isPublished: Boolean
  MenuDetail: String!
  name: String!
  order: OrderCreateOneInput
  price: String!
  relatedProduct: ProductItemCreateManyInput
  salePrice: String!
  shoppingCart: ShoppingCartCreateOneInput
  TermDetail: String!
  unitType: String!
}

type ProductItemEdge {
  cursor: String!
  node: ProductItem!
}

enum ProductItemOrderByInput {
  amount_ASC
  amount_DESC
  brand_ASC
  brand_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  isPublished_ASC
  isPublished_DESC
  MenuDetail_ASC
  MenuDetail_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  salePrice_ASC
  salePrice_DESC
  TermDetail_ASC
  TermDetail_DESC
  unitType_ASC
  unitType_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProductItemScalarWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [ProductItemScalarWhereInput!]
  brand: String
  brand_contains: String
  brand_ends_with: String
  brand_gt: String
  brand_gte: String
  brand_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_not: String
  brand_not_contains: String
  brand_not_ends_with: String
  brand_not_in: [String!]
  brand_not_starts_with: String
  brand_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  MenuDetail: String
  MenuDetail_contains: String
  MenuDetail_ends_with: String
  MenuDetail_gt: String
  MenuDetail_gte: String
  MenuDetail_in: [String!]
  MenuDetail_lt: String
  MenuDetail_lte: String
  MenuDetail_not: String
  MenuDetail_not_contains: String
  MenuDetail_not_ends_with: String
  MenuDetail_not_in: [String!]
  MenuDetail_not_starts_with: String
  MenuDetail_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProductItemScalarWhereInput!]
  OR: [ProductItemScalarWhereInput!]
  price: String
  price_contains: String
  price_ends_with: String
  price_gt: String
  price_gte: String
  price_in: [String!]
  price_lt: String
  price_lte: String
  price_not: String
  price_not_contains: String
  price_not_ends_with: String
  price_not_in: [String!]
  price_not_starts_with: String
  price_starts_with: String
  salePrice: String
  salePrice_contains: String
  salePrice_ends_with: String
  salePrice_gt: String
  salePrice_gte: String
  salePrice_in: [String!]
  salePrice_lt: String
  salePrice_lte: String
  salePrice_not: String
  salePrice_not_contains: String
  salePrice_not_ends_with: String
  salePrice_not_in: [String!]
  salePrice_not_starts_with: String
  salePrice_starts_with: String
  TermDetail: String
  TermDetail_contains: String
  TermDetail_ends_with: String
  TermDetail_gt: String
  TermDetail_gte: String
  TermDetail_in: [String!]
  TermDetail_lt: String
  TermDetail_lte: String
  TermDetail_not: String
  TermDetail_not_contains: String
  TermDetail_not_ends_with: String
  TermDetail_not_in: [String!]
  TermDetail_not_starts_with: String
  TermDetail_starts_with: String
  unitType: String
  unitType_contains: String
  unitType_ends_with: String
  unitType_gt: String
  unitType_gte: String
  unitType_in: [String!]
  unitType_lt: String
  unitType_lte: String
  unitType_not: String
  unitType_not_contains: String
  unitType_not_ends_with: String
  unitType_not_in: [String!]
  unitType_not_starts_with: String
  unitType_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProductItemUpdateDataInput {
  amount: Int
  brand: String
  category: CategoryUpdateOneRequiredWithoutProductItemInput
  description: String
  image: String
  isPublished: Boolean
  MenuDetail: String
  name: String
  order: OrderUpdateOneInput
  price: String
  relatedProduct: ProductItemUpdateManyInput
  salePrice: String
  shoppingCart: ShoppingCartUpdateOneInput
  TermDetail: String
  unitType: String
}

input ProductItemUpdateInput {
  amount: Int
  brand: String
  category: CategoryUpdateOneRequiredWithoutProductItemInput
  description: String
  image: String
  isPublished: Boolean
  MenuDetail: String
  name: String
  order: OrderUpdateOneInput
  price: String
  relatedProduct: ProductItemUpdateManyInput
  salePrice: String
  shoppingCart: ShoppingCartUpdateOneInput
  TermDetail: String
  unitType: String
}

input ProductItemUpdateManyDataInput {
  amount: Int
  brand: String
  description: String
  image: String
  isPublished: Boolean
  MenuDetail: String
  name: String
  price: String
  salePrice: String
  TermDetail: String
  unitType: String
}

input ProductItemUpdateManyInput {
  connect: [ProductItemWhereUniqueInput!]
  create: [ProductItemCreateInput!]
  delete: [ProductItemWhereUniqueInput!]
  deleteMany: [ProductItemScalarWhereInput!]
  disconnect: [ProductItemWhereUniqueInput!]
  set: [ProductItemWhereUniqueInput!]
  update: [ProductItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductItemUpdateManyWithWhereNestedInput!]
  upsert: [ProductItemUpsertWithWhereUniqueNestedInput!]
}

input ProductItemUpdateManyMutationInput {
  amount: Int
  brand: String
  description: String
  image: String
  isPublished: Boolean
  MenuDetail: String
  name: String
  price: String
  salePrice: String
  TermDetail: String
  unitType: String
}

input ProductItemUpdateManyWithoutCategoryInput {
  connect: [ProductItemWhereUniqueInput!]
  create: [ProductItemCreateWithoutCategoryInput!]
  delete: [ProductItemWhereUniqueInput!]
  deleteMany: [ProductItemScalarWhereInput!]
  disconnect: [ProductItemWhereUniqueInput!]
  set: [ProductItemWhereUniqueInput!]
  update: [ProductItemUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductItemUpdateManyWithWhereNestedInput!]
  upsert: [ProductItemUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductItemUpdateManyWithWhereNestedInput {
  data: ProductItemUpdateManyDataInput!
  where: ProductItemScalarWhereInput!
}

input ProductItemUpdateOneRequiredInput {
  connect: ProductItemWhereUniqueInput
  create: ProductItemCreateInput
  update: ProductItemUpdateDataInput
  upsert: ProductItemUpsertNestedInput
}

input ProductItemUpdateWithoutCategoryDataInput {
  amount: Int
  brand: String
  description: String
  image: String
  isPublished: Boolean
  MenuDetail: String
  name: String
  order: OrderUpdateOneInput
  price: String
  relatedProduct: ProductItemUpdateManyInput
  salePrice: String
  shoppingCart: ShoppingCartUpdateOneInput
  TermDetail: String
  unitType: String
}

input ProductItemUpdateWithWhereUniqueNestedInput {
  data: ProductItemUpdateDataInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemUpdateWithWhereUniqueWithoutCategoryInput {
  data: ProductItemUpdateWithoutCategoryDataInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemUpsertNestedInput {
  create: ProductItemCreateInput!
  update: ProductItemUpdateDataInput!
}

input ProductItemUpsertWithWhereUniqueNestedInput {
  create: ProductItemCreateInput!
  update: ProductItemUpdateDataInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemUpsertWithWhereUniqueWithoutCategoryInput {
  create: ProductItemCreateWithoutCategoryInput!
  update: ProductItemUpdateWithoutCategoryDataInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [ProductItemWhereInput!]
  brand: String
  brand_contains: String
  brand_ends_with: String
  brand_gt: String
  brand_gte: String
  brand_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_not: String
  brand_not_contains: String
  brand_not_ends_with: String
  brand_not_in: [String!]
  brand_not_starts_with: String
  brand_starts_with: String
  category: CategoryWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  MenuDetail: String
  MenuDetail_contains: String
  MenuDetail_ends_with: String
  MenuDetail_gt: String
  MenuDetail_gte: String
  MenuDetail_in: [String!]
  MenuDetail_lt: String
  MenuDetail_lte: String
  MenuDetail_not: String
  MenuDetail_not_contains: String
  MenuDetail_not_ends_with: String
  MenuDetail_not_in: [String!]
  MenuDetail_not_starts_with: String
  MenuDetail_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProductItemWhereInput!]
  OR: [ProductItemWhereInput!]
  order: OrderWhereInput
  price: String
  price_contains: String
  price_ends_with: String
  price_gt: String
  price_gte: String
  price_in: [String!]
  price_lt: String
  price_lte: String
  price_not: String
  price_not_contains: String
  price_not_ends_with: String
  price_not_in: [String!]
  price_not_starts_with: String
  price_starts_with: String
  relatedProduct_every: ProductItemWhereInput
  relatedProduct_none: ProductItemWhereInput
  relatedProduct_some: ProductItemWhereInput
  salePrice: String
  salePrice_contains: String
  salePrice_ends_with: String
  salePrice_gt: String
  salePrice_gte: String
  salePrice_in: [String!]
  salePrice_lt: String
  salePrice_lte: String
  salePrice_not: String
  salePrice_not_contains: String
  salePrice_not_ends_with: String
  salePrice_not_in: [String!]
  salePrice_not_starts_with: String
  salePrice_starts_with: String
  shoppingCart: ShoppingCartWhereInput
  TermDetail: String
  TermDetail_contains: String
  TermDetail_ends_with: String
  TermDetail_gt: String
  TermDetail_gte: String
  TermDetail_in: [String!]
  TermDetail_lt: String
  TermDetail_lte: String
  TermDetail_not: String
  TermDetail_not_contains: String
  TermDetail_not_ends_with: String
  TermDetail_not_in: [String!]
  TermDetail_not_starts_with: String
  TermDetail_starts_with: String
  unitType: String
  unitType_contains: String
  unitType_ends_with: String
  unitType_gt: String
  unitType_gte: String
  unitType_in: [String!]
  unitType_lt: String
  unitType_lte: String
  unitType_not: String
  unitType_not_contains: String
  unitType_not_ends_with: String
  unitType_not_in: [String!]
  unitType_not_starts_with: String
  unitType_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProductItemWhereUniqueInput {
  id: ID
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(after: String, before: String, first: Int, last: Int, orderBy: AddressOrderByInput, skip: Int, where: AddressWhereInput): [Address!]!
  addressesConnection(after: String, before: String, first: Int, last: Int, orderBy: AddressOrderByInput, skip: Int, where: AddressWhereInput): AddressConnection!
  categories(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]!
  categoriesConnection(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): CategoryConnection!
  category(where: CategoryWhereUniqueInput!): Category
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  invoices(after: String, before: String, first: Int, last: Int, orderBy: InvoiceOrderByInput, skip: Int, where: InvoiceWhereInput): [Invoice!]!
  invoicesConnection(after: String, before: String, first: Int, last: Int, orderBy: InvoiceOrderByInput, skip: Int, where: InvoiceWhereInput): InvoiceConnection!
  me: User
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]!
  orderItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): OrderItemConnection!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]!
  ordersConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): OrderConnection!
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(after: String, before: String, first: Int, last: Int, orderBy: PaymentOrderByInput, skip: Int, where: PaymentWhereInput): [Payment!]!
  paymentsConnection(after: String, before: String, first: Int, last: Int, orderBy: PaymentOrderByInput, skip: Int, where: PaymentWhereInput): PaymentConnection!
  productItem(where: ProductItemWhereUniqueInput!): ProductItem
  productItems(after: String, before: String, first: Int, last: Int, orderBy: ProductItemOrderByInput, skip: Int, where: ProductItemWhereInput): [ProductItem!]!
  productItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProductItemOrderByInput, skip: Int, where: ProductItemWhereInput): ProductItemConnection!
  quotation(where: QuotationWhereUniqueInput!): Quotation
  quotationItem(where: QuotationItemWhereUniqueInput!): QuotationItem
  quotationItems(after: String, before: String, first: Int, last: Int, orderBy: QuotationItemOrderByInput, skip: Int, where: QuotationItemWhereInput): [QuotationItem!]!
  quotationItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: QuotationItemOrderByInput, skip: Int, where: QuotationItemWhereInput): QuotationItemConnection!
  quotations(after: String, before: String, first: Int, last: Int, orderBy: QuotationOrderByInput, skip: Int, where: QuotationWhereInput): [Quotation!]!
  quotationsConnection(after: String, before: String, first: Int, last: Int, orderBy: QuotationOrderByInput, skip: Int, where: QuotationWhereInput): QuotationConnection!
  salesman(where: SalesmanWhereUniqueInput!): Salesman
  salesmen(after: String, before: String, first: Int, last: Int, orderBy: SalesmanOrderByInput, skip: Int, where: SalesmanWhereInput): [Salesman!]!
  salesmenConnection(after: String, before: String, first: Int, last: Int, orderBy: SalesmanOrderByInput, skip: Int, where: SalesmanWhereInput): SalesmanConnection!
  shipping(where: ShippingWhereUniqueInput!): Shipping
  shippings(after: String, before: String, first: Int, last: Int, orderBy: ShippingOrderByInput, skip: Int, where: ShippingWhereInput): [Shipping!]!
  shippingsConnection(after: String, before: String, first: Int, last: Int, orderBy: ShippingOrderByInput, skip: Int, where: ShippingWhereInput): ShippingConnection!
  shoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  shoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  shoppingCartItems(after: String, before: String, first: Int, last: Int, orderBy: ShoppingCartItemOrderByInput, skip: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]!
  shoppingCartItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: ShoppingCartItemOrderByInput, skip: Int, where: ShoppingCartItemWhereInput): ShoppingCartItemConnection!
  shoppingCarts(after: String, before: String, first: Int, last: Int, orderBy: ShoppingCartOrderByInput, skip: Int, where: ShoppingCartWhereInput): [ShoppingCart!]!
  shoppingCartsConnection(after: String, before: String, first: Int, last: Int, orderBy: ShoppingCartOrderByInput, skip: Int, where: ShoppingCartWhereInput): ShoppingCartConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Quotation {
  createdAt: DateTime!
  customer: User!
  docId: String
  fileUrl: String
  id: ID!
  quotationItems(after: String, before: String, first: Int, last: Int, orderBy: QuotationItemOrderByInput, skip: Int, where: QuotationItemWhereInput): [QuotationItem!]
  status: String
  updatedAt: DateTime!
}

type QuotationConnection {
  aggregate: AggregateQuotation!
  edges: [QuotationEdge!]!
  pageInfo: PageInfo!
}

input QuotationCreateInput {
  customer: UserCreateOneWithoutQuotationsInput!
  docId: String
  fileUrl: String
  id: ID
  quotationItems: QuotationItemCreateManyWithoutQuotationInput
  status: String
}

input QuotationCreateManyWithoutCustomerInput {
  connect: [QuotationWhereUniqueInput!]
  create: [QuotationCreateWithoutCustomerInput!]
}

input QuotationCreateOneInput {
  connect: QuotationWhereUniqueInput
  create: QuotationCreateInput
}

input QuotationCreateOneWithoutQuotationItemsInput {
  connect: QuotationWhereUniqueInput
  create: QuotationCreateWithoutQuotationItemsInput
}

input QuotationCreateWithoutCustomerInput {
  docId: String
  fileUrl: String
  id: ID
  quotationItems: QuotationItemCreateManyWithoutQuotationInput
  status: String
}

input QuotationCreateWithoutQuotationItemsInput {
  customer: UserCreateOneWithoutQuotationsInput!
  docId: String
  fileUrl: String
  id: ID
  status: String
}

type QuotationEdge {
  cursor: String!
  node: Quotation!
}

type QuotationItem {
  amount: Int!
  id: ID!
  key: String!
  product: ProductItem!
  quotation: Quotation!
  realPrice: Float!
}

type QuotationItemConnection {
  aggregate: AggregateQuotationItem!
  edges: [QuotationItemEdge!]!
  pageInfo: PageInfo!
}

input QuotationItemCreateInput {
  amount: Int!
  id: ID
  key: String!
  product: ProductItemCreateOneInput!
  quotation: QuotationCreateOneWithoutQuotationItemsInput!
  realPrice: Float!
}

input QuotationItemCreateManyWithoutQuotationInput {
  connect: [QuotationItemWhereUniqueInput!]
  create: [QuotationItemCreateWithoutQuotationInput!]
}

input QuotationItemCreateWithoutQuotationInput {
  amount: Int!
  id: ID
  key: String!
  product: ProductItemCreateOneInput!
  realPrice: Float!
}

type QuotationItemEdge {
  cursor: String!
  node: QuotationItem!
}

enum QuotationItemOrderByInput {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  realPrice_ASC
  realPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input QuotationItemScalarWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [QuotationItemScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [QuotationItemScalarWhereInput!]
  OR: [QuotationItemScalarWhereInput!]
  realPrice: Float
  realPrice_gt: Float
  realPrice_gte: Float
  realPrice_in: [Float!]
  realPrice_lt: Float
  realPrice_lte: Float
  realPrice_not: Float
  realPrice_not_in: [Float!]
}

input QuotationItemUpdateInput {
  amount: Int
  key: String
  product: ProductItemUpdateOneRequiredInput
  quotation: QuotationUpdateOneRequiredWithoutQuotationItemsInput
  realPrice: Float
}

input QuotationItemUpdateManyDataInput {
  amount: Int
  key: String
  realPrice: Float
}

input QuotationItemUpdateManyMutationInput {
  amount: Int
  key: String
  realPrice: Float
}

input QuotationItemUpdateManyWithoutQuotationInput {
  connect: [QuotationItemWhereUniqueInput!]
  create: [QuotationItemCreateWithoutQuotationInput!]
  delete: [QuotationItemWhereUniqueInput!]
  deleteMany: [QuotationItemScalarWhereInput!]
  disconnect: [QuotationItemWhereUniqueInput!]
  set: [QuotationItemWhereUniqueInput!]
  update: [QuotationItemUpdateWithWhereUniqueWithoutQuotationInput!]
  updateMany: [QuotationItemUpdateManyWithWhereNestedInput!]
  upsert: [QuotationItemUpsertWithWhereUniqueWithoutQuotationInput!]
}

input QuotationItemUpdateManyWithWhereNestedInput {
  data: QuotationItemUpdateManyDataInput!
  where: QuotationItemScalarWhereInput!
}

input QuotationItemUpdateWithoutQuotationDataInput {
  amount: Int
  key: String
  product: ProductItemUpdateOneRequiredInput
  realPrice: Float
}

input QuotationItemUpdateWithWhereUniqueWithoutQuotationInput {
  data: QuotationItemUpdateWithoutQuotationDataInput!
  where: QuotationItemWhereUniqueInput!
}

input QuotationItemUpsertWithWhereUniqueWithoutQuotationInput {
  create: QuotationItemCreateWithoutQuotationInput!
  update: QuotationItemUpdateWithoutQuotationDataInput!
  where: QuotationItemWhereUniqueInput!
}

input QuotationItemWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [QuotationItemWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [QuotationItemWhereInput!]
  OR: [QuotationItemWhereInput!]
  product: ProductItemWhereInput
  quotation: QuotationWhereInput
  realPrice: Float
  realPrice_gt: Float
  realPrice_gte: Float
  realPrice_in: [Float!]
  realPrice_lt: Float
  realPrice_lte: Float
  realPrice_not: Float
  realPrice_not_in: [Float!]
}

input QuotationItemWhereUniqueInput {
  id: ID
  key: String
}

enum QuotationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  docId_ASC
  docId_DESC
  fileUrl_ASC
  fileUrl_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input QuotationScalarWhereInput {
  AND: [QuotationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  fileUrl: String
  fileUrl_contains: String
  fileUrl_ends_with: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_not: String
  fileUrl_not_contains: String
  fileUrl_not_ends_with: String
  fileUrl_not_in: [String!]
  fileUrl_not_starts_with: String
  fileUrl_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [QuotationScalarWhereInput!]
  OR: [QuotationScalarWhereInput!]
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input QuotationUpdateDataInput {
  customer: UserUpdateOneRequiredWithoutQuotationsInput
  docId: String
  fileUrl: String
  quotationItems: QuotationItemUpdateManyWithoutQuotationInput
  status: String
}

input QuotationUpdateInput {
  customer: UserUpdateOneRequiredWithoutQuotationsInput
  docId: String
  fileUrl: String
  quotationItems: QuotationItemUpdateManyWithoutQuotationInput
  status: String
}

input QuotationUpdateManyDataInput {
  docId: String
  fileUrl: String
  status: String
}

input QuotationUpdateManyMutationInput {
  docId: String
  fileUrl: String
  status: String
}

input QuotationUpdateManyWithoutCustomerInput {
  connect: [QuotationWhereUniqueInput!]
  create: [QuotationCreateWithoutCustomerInput!]
  delete: [QuotationWhereUniqueInput!]
  deleteMany: [QuotationScalarWhereInput!]
  disconnect: [QuotationWhereUniqueInput!]
  set: [QuotationWhereUniqueInput!]
  update: [QuotationUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [QuotationUpdateManyWithWhereNestedInput!]
  upsert: [QuotationUpsertWithWhereUniqueWithoutCustomerInput!]
}

input QuotationUpdateManyWithWhereNestedInput {
  data: QuotationUpdateManyDataInput!
  where: QuotationScalarWhereInput!
}

input QuotationUpdateOneInput {
  connect: QuotationWhereUniqueInput
  create: QuotationCreateInput
  delete: Boolean
  disconnect: Boolean
  update: QuotationUpdateDataInput
  upsert: QuotationUpsertNestedInput
}

input QuotationUpdateOneRequiredWithoutQuotationItemsInput {
  connect: QuotationWhereUniqueInput
  create: QuotationCreateWithoutQuotationItemsInput
  update: QuotationUpdateWithoutQuotationItemsDataInput
  upsert: QuotationUpsertWithoutQuotationItemsInput
}

input QuotationUpdateWithoutCustomerDataInput {
  docId: String
  fileUrl: String
  quotationItems: QuotationItemUpdateManyWithoutQuotationInput
  status: String
}

input QuotationUpdateWithoutQuotationItemsDataInput {
  customer: UserUpdateOneRequiredWithoutQuotationsInput
  docId: String
  fileUrl: String
  status: String
}

input QuotationUpdateWithWhereUniqueWithoutCustomerInput {
  data: QuotationUpdateWithoutCustomerDataInput!
  where: QuotationWhereUniqueInput!
}

input QuotationUpsertNestedInput {
  create: QuotationCreateInput!
  update: QuotationUpdateDataInput!
}

input QuotationUpsertWithoutQuotationItemsInput {
  create: QuotationCreateWithoutQuotationItemsInput!
  update: QuotationUpdateWithoutQuotationItemsDataInput!
}

input QuotationUpsertWithWhereUniqueWithoutCustomerInput {
  create: QuotationCreateWithoutCustomerInput!
  update: QuotationUpdateWithoutCustomerDataInput!
  where: QuotationWhereUniqueInput!
}

input QuotationWhereInput {
  AND: [QuotationWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  fileUrl: String
  fileUrl_contains: String
  fileUrl_ends_with: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_not: String
  fileUrl_not_contains: String
  fileUrl_not_ends_with: String
  fileUrl_not_in: [String!]
  fileUrl_not_starts_with: String
  fileUrl_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [QuotationWhereInput!]
  OR: [QuotationWhereInput!]
  quotationItems_every: QuotationItemWhereInput
  quotationItems_none: QuotationItemWhereInput
  quotationItems_some: QuotationItemWhereInput
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input QuotationWhereUniqueInput {
  id: ID
}

type Salesman {
  createdAt: DateTime!
  email: String!
  id: ID!
  invoices(after: String, before: String, first: Int, last: Int, orderBy: InvoiceOrderByInput, skip: Int, where: InvoiceWhereInput): [Invoice!]
  name: String!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]
  payments(after: String, before: String, first: Int, last: Int, orderBy: PaymentOrderByInput, skip: Int, where: PaymentWhereInput): [Payment!]
  phone: String!
  updatedAt: DateTime!
}

type SalesmanConnection {
  aggregate: AggregateSalesman!
  edges: [SalesmanEdge!]!
  pageInfo: PageInfo!
}

input SalesmanCreateInput {
  email: String!
  id: ID
  invoices: InvoiceCreateManyWithoutSalesmanInput
  name: String!
  orders: OrderCreateManyWithoutSalesmanInput
  payments: PaymentCreateManyWithoutSalesmanInput
  phone: String!
}

input SalesmanCreateOneWithoutInvoicesInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutInvoicesInput
}

input SalesmanCreateOneWithoutOrdersInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutOrdersInput
}

input SalesmanCreateOneWithoutPaymentsInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutPaymentsInput
}

input SalesmanCreateWithoutInvoicesInput {
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutSalesmanInput
  payments: PaymentCreateManyWithoutSalesmanInput
  phone: String!
}

input SalesmanCreateWithoutOrdersInput {
  email: String!
  id: ID
  invoices: InvoiceCreateManyWithoutSalesmanInput
  name: String!
  payments: PaymentCreateManyWithoutSalesmanInput
  phone: String!
}

input SalesmanCreateWithoutPaymentsInput {
  email: String!
  id: ID
  invoices: InvoiceCreateManyWithoutSalesmanInput
  name: String!
  orders: OrderCreateManyWithoutSalesmanInput
  phone: String!
}

type SalesmanEdge {
  cursor: String!
  node: Salesman!
}

enum SalesmanOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SalesmanUpdateInput {
  email: String
  invoices: InvoiceUpdateManyWithoutSalesmanInput
  name: String
  orders: OrderUpdateManyWithoutSalesmanInput
  payments: PaymentUpdateManyWithoutSalesmanInput
  phone: String
}

input SalesmanUpdateManyMutationInput {
  email: String
  name: String
  phone: String
}

input SalesmanUpdateOneRequiredWithoutInvoicesInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutInvoicesInput
  update: SalesmanUpdateWithoutInvoicesDataInput
  upsert: SalesmanUpsertWithoutInvoicesInput
}

input SalesmanUpdateOneWithoutOrdersInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: SalesmanUpdateWithoutOrdersDataInput
  upsert: SalesmanUpsertWithoutOrdersInput
}

input SalesmanUpdateOneWithoutPaymentsInput {
  connect: SalesmanWhereUniqueInput
  create: SalesmanCreateWithoutPaymentsInput
  delete: Boolean
  disconnect: Boolean
  update: SalesmanUpdateWithoutPaymentsDataInput
  upsert: SalesmanUpsertWithoutPaymentsInput
}

input SalesmanUpdateWithoutInvoicesDataInput {
  email: String
  name: String
  orders: OrderUpdateManyWithoutSalesmanInput
  payments: PaymentUpdateManyWithoutSalesmanInput
  phone: String
}

input SalesmanUpdateWithoutOrdersDataInput {
  email: String
  invoices: InvoiceUpdateManyWithoutSalesmanInput
  name: String
  payments: PaymentUpdateManyWithoutSalesmanInput
  phone: String
}

input SalesmanUpdateWithoutPaymentsDataInput {
  email: String
  invoices: InvoiceUpdateManyWithoutSalesmanInput
  name: String
  orders: OrderUpdateManyWithoutSalesmanInput
  phone: String
}

input SalesmanUpsertWithoutInvoicesInput {
  create: SalesmanCreateWithoutInvoicesInput!
  update: SalesmanUpdateWithoutInvoicesDataInput!
}

input SalesmanUpsertWithoutOrdersInput {
  create: SalesmanCreateWithoutOrdersInput!
  update: SalesmanUpdateWithoutOrdersDataInput!
}

input SalesmanUpsertWithoutPaymentsInput {
  create: SalesmanCreateWithoutPaymentsInput!
  update: SalesmanUpdateWithoutPaymentsDataInput!
}

input SalesmanWhereInput {
  AND: [SalesmanWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  invoices_every: InvoiceWhereInput
  invoices_none: InvoiceWhereInput
  invoices_some: InvoiceWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SalesmanWhereInput!]
  OR: [SalesmanWhereInput!]
  orders_every: OrderWhereInput
  orders_none: OrderWhereInput
  orders_some: OrderWhereInput
  payments_every: PaymentWhereInput
  payments_none: PaymentWhereInput
  payments_some: PaymentWhereInput
  phone: String
  phone_contains: String
  phone_ends_with: String
  phone_gt: String
  phone_gte: String
  phone_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_not: String
  phone_not_contains: String
  phone_not_ends_with: String
  phone_not_in: [String!]
  phone_not_starts_with: String
  phone_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input SalesmanWhereUniqueInput {
  id: ID
}

type Shipping {
  address: Address!
  createdAt: DateTime!
  docId: String!
  dueDate: DateTime!
  id: ID!
  invoce: Invoice!
  order: Order!
  status: String!
  updatedAt: DateTime!
}

type ShippingConnection {
  aggregate: AggregateShipping!
  edges: [ShippingEdge!]!
  pageInfo: PageInfo!
}

input ShippingCreateInput {
  address: AddressCreateOneWithoutShippingInput!
  docId: String!
  dueDate: DateTime!
  id: ID
  invoce: InvoiceCreateOneInput!
  order: OrderCreateOneWithoutShippingInput!
  status: String!
}

input ShippingCreateManyWithoutAddressInput {
  connect: [ShippingWhereUniqueInput!]
  create: [ShippingCreateWithoutAddressInput!]
}

input ShippingCreateOneWithoutOrderInput {
  connect: ShippingWhereUniqueInput
  create: ShippingCreateWithoutOrderInput
}

input ShippingCreateWithoutAddressInput {
  docId: String!
  dueDate: DateTime!
  id: ID
  invoce: InvoiceCreateOneInput!
  order: OrderCreateOneWithoutShippingInput!
  status: String!
}

input ShippingCreateWithoutOrderInput {
  address: AddressCreateOneWithoutShippingInput!
  docId: String!
  dueDate: DateTime!
  id: ID
  invoce: InvoiceCreateOneInput!
  status: String!
}

type ShippingEdge {
  cursor: String!
  node: Shipping!
}

enum ShippingOrderByInput {
  createdAt_ASC
  createdAt_DESC
  docId_ASC
  docId_DESC
  dueDate_ASC
  dueDate_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ShippingScalarWhereInput {
  AND: [ShippingScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  dueDate: DateTime
  dueDate_gt: DateTime
  dueDate_gte: DateTime
  dueDate_in: [DateTime!]
  dueDate_lt: DateTime
  dueDate_lte: DateTime
  dueDate_not: DateTime
  dueDate_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ShippingScalarWhereInput!]
  OR: [ShippingScalarWhereInput!]
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ShippingUpdateInput {
  address: AddressUpdateOneRequiredWithoutShippingInput
  docId: String
  dueDate: DateTime
  invoce: InvoiceUpdateOneRequiredInput
  order: OrderUpdateOneRequiredWithoutShippingInput
  status: String
}

input ShippingUpdateManyDataInput {
  docId: String
  dueDate: DateTime
  status: String
}

input ShippingUpdateManyMutationInput {
  docId: String
  dueDate: DateTime
  status: String
}

input ShippingUpdateManyWithoutAddressInput {
  connect: [ShippingWhereUniqueInput!]
  create: [ShippingCreateWithoutAddressInput!]
  delete: [ShippingWhereUniqueInput!]
  deleteMany: [ShippingScalarWhereInput!]
  disconnect: [ShippingWhereUniqueInput!]
  set: [ShippingWhereUniqueInput!]
  update: [ShippingUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [ShippingUpdateManyWithWhereNestedInput!]
  upsert: [ShippingUpsertWithWhereUniqueWithoutAddressInput!]
}

input ShippingUpdateManyWithWhereNestedInput {
  data: ShippingUpdateManyDataInput!
  where: ShippingScalarWhereInput!
}

input ShippingUpdateOneWithoutOrderInput {
  connect: ShippingWhereUniqueInput
  create: ShippingCreateWithoutOrderInput
  delete: Boolean
  disconnect: Boolean
  update: ShippingUpdateWithoutOrderDataInput
  upsert: ShippingUpsertWithoutOrderInput
}

input ShippingUpdateWithoutAddressDataInput {
  docId: String
  dueDate: DateTime
  invoce: InvoiceUpdateOneRequiredInput
  order: OrderUpdateOneRequiredWithoutShippingInput
  status: String
}

input ShippingUpdateWithoutOrderDataInput {
  address: AddressUpdateOneRequiredWithoutShippingInput
  docId: String
  dueDate: DateTime
  invoce: InvoiceUpdateOneRequiredInput
  status: String
}

input ShippingUpdateWithWhereUniqueWithoutAddressInput {
  data: ShippingUpdateWithoutAddressDataInput!
  where: ShippingWhereUniqueInput!
}

input ShippingUpsertWithoutOrderInput {
  create: ShippingCreateWithoutOrderInput!
  update: ShippingUpdateWithoutOrderDataInput!
}

input ShippingUpsertWithWhereUniqueWithoutAddressInput {
  create: ShippingCreateWithoutAddressInput!
  update: ShippingUpdateWithoutAddressDataInput!
  where: ShippingWhereUniqueInput!
}

input ShippingWhereInput {
  address: AddressWhereInput
  AND: [ShippingWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  docId: String
  docId_contains: String
  docId_ends_with: String
  docId_gt: String
  docId_gte: String
  docId_in: [String!]
  docId_lt: String
  docId_lte: String
  docId_not: String
  docId_not_contains: String
  docId_not_ends_with: String
  docId_not_in: [String!]
  docId_not_starts_with: String
  docId_starts_with: String
  dueDate: DateTime
  dueDate_gt: DateTime
  dueDate_gte: DateTime
  dueDate_in: [DateTime!]
  dueDate_lt: DateTime
  dueDate_lte: DateTime
  dueDate_not: DateTime
  dueDate_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  invoce: InvoiceWhereInput
  NOT: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  order: OrderWhereInput
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ShippingWhereUniqueInput {
  id: ID
}

type ShoppingCart {
  createdAt: DateTime!
  customer: User!
  id: ID!
  productItems(after: String, before: String, first: Int, last: Int, orderBy: ShoppingCartItemOrderByInput, skip: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]
  total_cost: Float!
  updatedAt: DateTime!
}

type ShoppingCartConnection {
  aggregate: AggregateShoppingCart!
  edges: [ShoppingCartEdge!]!
  pageInfo: PageInfo!
}

input ShoppingCartCreateInput {
  customer: UserCreateOneWithoutShoppingCartInput!
  id: ID
  productItems: ShoppingCartItemCreateManyWithoutShoppingCartInput
  total_cost: Float!
}

input ShoppingCartCreateOneInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateInput
}

input ShoppingCartCreateOneWithoutCustomerInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateWithoutCustomerInput
}

input ShoppingCartCreateOneWithoutProductItemsInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateWithoutProductItemsInput
}

input ShoppingCartCreateWithoutCustomerInput {
  id: ID
  productItems: ShoppingCartItemCreateManyWithoutShoppingCartInput
  total_cost: Float!
}

input ShoppingCartCreateWithoutProductItemsInput {
  customer: UserCreateOneWithoutShoppingCartInput!
  id: ID
  total_cost: Float!
}

type ShoppingCartEdge {
  cursor: String!
  node: ShoppingCart!
}

type ShoppingCartItem {
  amount: Int!
  id: ID!
  key: String!
  product: ProductItem!
  ShoppingCart: ShoppingCart
}

type ShoppingCartItemConnection {
  aggregate: AggregateShoppingCartItem!
  edges: [ShoppingCartItemEdge!]!
  pageInfo: PageInfo!
}

input ShoppingCartItemCreateInput {
  amount: Int!
  id: ID
  key: String!
  product: ProductItemCreateOneInput!
  ShoppingCart: ShoppingCartCreateOneWithoutProductItemsInput
}

input ShoppingCartItemCreateManyWithoutShoppingCartInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  create: [ShoppingCartItemCreateWithoutShoppingCartInput!]
}

input ShoppingCartItemCreateWithoutShoppingCartInput {
  amount: Int!
  id: ID
  key: String!
  product: ProductItemCreateOneInput!
}

type ShoppingCartItemEdge {
  cursor: String!
  node: ShoppingCartItem!
}

enum ShoppingCartItemOrderByInput {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ShoppingCartItemScalarWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [ShoppingCartItemScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [ShoppingCartItemScalarWhereInput!]
  OR: [ShoppingCartItemScalarWhereInput!]
}

input ShoppingCartItemUpdateInput {
  amount: Int
  key: String
  product: ProductItemUpdateOneRequiredInput
  ShoppingCart: ShoppingCartUpdateOneWithoutProductItemsInput
}

input ShoppingCartItemUpdateManyDataInput {
  amount: Int
  key: String
}

input ShoppingCartItemUpdateManyMutationInput {
  amount: Int
  key: String
}

input ShoppingCartItemUpdateManyWithoutShoppingCartInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  create: [ShoppingCartItemCreateWithoutShoppingCartInput!]
  delete: [ShoppingCartItemWhereUniqueInput!]
  deleteMany: [ShoppingCartItemScalarWhereInput!]
  disconnect: [ShoppingCartItemWhereUniqueInput!]
  set: [ShoppingCartItemWhereUniqueInput!]
  update: [ShoppingCartItemUpdateWithWhereUniqueWithoutShoppingCartInput!]
  updateMany: [ShoppingCartItemUpdateManyWithWhereNestedInput!]
  upsert: [ShoppingCartItemUpsertWithWhereUniqueWithoutShoppingCartInput!]
}

input ShoppingCartItemUpdateManyWithWhereNestedInput {
  data: ShoppingCartItemUpdateManyDataInput!
  where: ShoppingCartItemScalarWhereInput!
}

input ShoppingCartItemUpdateWithoutShoppingCartDataInput {
  amount: Int
  key: String
  product: ProductItemUpdateOneRequiredInput
}

input ShoppingCartItemUpdateWithWhereUniqueWithoutShoppingCartInput {
  data: ShoppingCartItemUpdateWithoutShoppingCartDataInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemUpsertWithWhereUniqueWithoutShoppingCartInput {
  create: ShoppingCartItemCreateWithoutShoppingCartInput!
  update: ShoppingCartItemUpdateWithoutShoppingCartDataInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemWhereInput {
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  AND: [ShoppingCartItemWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  NOT: [ShoppingCartItemWhereInput!]
  OR: [ShoppingCartItemWhereInput!]
  product: ProductItemWhereInput
  ShoppingCart: ShoppingCartWhereInput
}

input ShoppingCartItemWhereUniqueInput {
  id: ID
  key: String
}

enum ShoppingCartOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  total_cost_ASC
  total_cost_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ShoppingCartUpdateDataInput {
  customer: UserUpdateOneRequiredWithoutShoppingCartInput
  productItems: ShoppingCartItemUpdateManyWithoutShoppingCartInput
  total_cost: Float
}

input ShoppingCartUpdateInput {
  customer: UserUpdateOneRequiredWithoutShoppingCartInput
  productItems: ShoppingCartItemUpdateManyWithoutShoppingCartInput
  total_cost: Float
}

input ShoppingCartUpdateManyMutationInput {
  total_cost: Float
}

input ShoppingCartUpdateOneInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateInput
  delete: Boolean
  disconnect: Boolean
  update: ShoppingCartUpdateDataInput
  upsert: ShoppingCartUpsertNestedInput
}

input ShoppingCartUpdateOneRequiredWithoutCustomerInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateWithoutCustomerInput
  update: ShoppingCartUpdateWithoutCustomerDataInput
  upsert: ShoppingCartUpsertWithoutCustomerInput
}

input ShoppingCartUpdateOneWithoutProductItemsInput {
  connect: ShoppingCartWhereUniqueInput
  create: ShoppingCartCreateWithoutProductItemsInput
  delete: Boolean
  disconnect: Boolean
  update: ShoppingCartUpdateWithoutProductItemsDataInput
  upsert: ShoppingCartUpsertWithoutProductItemsInput
}

input ShoppingCartUpdateWithoutCustomerDataInput {
  productItems: ShoppingCartItemUpdateManyWithoutShoppingCartInput
  total_cost: Float
}

input ShoppingCartUpdateWithoutProductItemsDataInput {
  customer: UserUpdateOneRequiredWithoutShoppingCartInput
  total_cost: Float
}

input ShoppingCartUpsertNestedInput {
  create: ShoppingCartCreateInput!
  update: ShoppingCartUpdateDataInput!
}

input ShoppingCartUpsertWithoutCustomerInput {
  create: ShoppingCartCreateWithoutCustomerInput!
  update: ShoppingCartUpdateWithoutCustomerDataInput!
}

input ShoppingCartUpsertWithoutProductItemsInput {
  create: ShoppingCartCreateWithoutProductItemsInput!
  update: ShoppingCartUpdateWithoutProductItemsDataInput!
}

input ShoppingCartWhereInput {
  AND: [ShoppingCartWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ShoppingCartWhereInput!]
  OR: [ShoppingCartWhereInput!]
  productItems_every: ShoppingCartItemWhereInput
  productItems_none: ShoppingCartItemWhereInput
  productItems_some: ShoppingCartItemWhereInput
  total_cost: Float
  total_cost_gt: Float
  total_cost_gte: Float
  total_cost_in: [Float!]
  total_cost_lt: Float
  total_cost_lte: Float
  total_cost_not: Float
  total_cost_not_in: [Float!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ShoppingCartWhereUniqueInput {
  id: ID
}

type User {
  activated: Boolean!
  addresses(after: String, before: String, first: Int, last: Int, orderBy: AddressOrderByInput, skip: Int, where: AddressWhereInput): [Address!]
  avatar: String
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]
  password: String!
  payments(after: String, before: String, first: Int, last: Int, orderBy: PaymentOrderByInput, skip: Int, where: PaymentWhereInput): [Payment!]
  phone: String!
  quotations(after: String, before: String, first: Int, last: Int, orderBy: QuotationOrderByInput, skip: Int, where: QuotationWhereInput): [Quotation!]
  runningId: Int
  shoppingCart: ShoppingCart!
  type: String
  updatedAt: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  activated: Boolean
  addresses: AddressCreateManyWithoutCustomerInput
  avatar: String
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutCustomerInput
  password: String!
  payments: PaymentCreateManyWithoutCustomerInput
  phone: String!
  quotations: QuotationCreateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartCreateOneWithoutCustomerInput!
  type: String
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
}

input UserCreateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateOneWithoutPaymentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPaymentsInput
}

input UserCreateOneWithoutQuotationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutQuotationsInput
}

input UserCreateOneWithoutShoppingCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutShoppingCartInput
}

input UserCreateWithoutAddressesInput {
  activated: Boolean
  avatar: String
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutCustomerInput
  password: String!
  payments: PaymentCreateManyWithoutCustomerInput
  phone: String!
  quotations: QuotationCreateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartCreateOneWithoutCustomerInput!
  type: String
}

input UserCreateWithoutOrdersInput {
  activated: Boolean
  addresses: AddressCreateManyWithoutCustomerInput
  avatar: String
  email: String!
  id: ID
  name: String!
  password: String!
  payments: PaymentCreateManyWithoutCustomerInput
  phone: String!
  quotations: QuotationCreateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartCreateOneWithoutCustomerInput!
  type: String
}

input UserCreateWithoutPaymentsInput {
  activated: Boolean
  addresses: AddressCreateManyWithoutCustomerInput
  avatar: String
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutCustomerInput
  password: String!
  phone: String!
  quotations: QuotationCreateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartCreateOneWithoutCustomerInput!
  type: String
}

input UserCreateWithoutQuotationsInput {
  activated: Boolean
  addresses: AddressCreateManyWithoutCustomerInput
  avatar: String
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutCustomerInput
  password: String!
  payments: PaymentCreateManyWithoutCustomerInput
  phone: String!
  runningId: Int
  shoppingCart: ShoppingCartCreateOneWithoutCustomerInput!
  type: String
}

input UserCreateWithoutShoppingCartInput {
  activated: Boolean
  addresses: AddressCreateManyWithoutCustomerInput
  avatar: String
  email: String!
  id: ID
  name: String!
  orders: OrderCreateManyWithoutCustomerInput
  password: String!
  payments: PaymentCreateManyWithoutCustomerInput
  phone: String!
  quotations: QuotationCreateManyWithoutCustomerInput
  runningId: Int
  type: String
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  activated_ASC
  activated_DESC
  avatar_ASC
  avatar_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  runningId_ASC
  runningId_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateDataInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateManyMutationInput {
  activated: Boolean
  avatar: String
  email: String
  name: String
  password: String
  phone: String
  runningId: Int
  type: String
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutPaymentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPaymentsInput
  update: UserUpdateWithoutPaymentsDataInput
  upsert: UserUpsertWithoutPaymentsInput
}

input UserUpdateOneRequiredWithoutQuotationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutQuotationsInput
  update: UserUpdateWithoutQuotationsDataInput
  upsert: UserUpsertWithoutQuotationsInput
}

input UserUpdateOneRequiredWithoutShoppingCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutShoppingCartInput
  update: UserUpdateWithoutShoppingCartDataInput
  upsert: UserUpsertWithoutShoppingCartInput
}

input UserUpdateWithoutAddressesDataInput {
  activated: Boolean
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateWithoutOrdersDataInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateWithoutPaymentsDataInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateWithoutQuotationsDataInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  runningId: Int
  shoppingCart: ShoppingCartUpdateOneRequiredWithoutCustomerInput
  type: String
}

input UserUpdateWithoutShoppingCartDataInput {
  activated: Boolean
  addresses: AddressUpdateManyWithoutCustomerInput
  avatar: String
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  password: String
  payments: PaymentUpdateManyWithoutCustomerInput
  phone: String
  quotations: QuotationUpdateManyWithoutCustomerInput
  runningId: Int
  type: String
}

input UserUpsertNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
}

input UserUpsertWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput!
  update: UserUpdateWithoutAddressesDataInput!
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersDataInput!
}

input UserUpsertWithoutPaymentsInput {
  create: UserCreateWithoutPaymentsInput!
  update: UserUpdateWithoutPaymentsDataInput!
}

input UserUpsertWithoutQuotationsInput {
  create: UserCreateWithoutQuotationsInput!
  update: UserUpdateWithoutQuotationsDataInput!
}

input UserUpsertWithoutShoppingCartInput {
  create: UserCreateWithoutShoppingCartInput!
  update: UserUpdateWithoutShoppingCartDataInput!
}

input UserWhereInput {
  activated: Boolean
  activated_not: Boolean
  addresses_every: AddressWhereInput
  addresses_none: AddressWhereInput
  addresses_some: AddressWhereInput
  AND: [UserWhereInput!]
  avatar: String
  avatar_contains: String
  avatar_ends_with: String
  avatar_gt: String
  avatar_gte: String
  avatar_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_not: String
  avatar_not_contains: String
  avatar_not_ends_with: String
  avatar_not_in: [String!]
  avatar_not_starts_with: String
  avatar_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  orders_every: OrderWhereInput
  orders_none: OrderWhereInput
  orders_some: OrderWhereInput
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  payments_every: PaymentWhereInput
  payments_none: PaymentWhereInput
  payments_some: PaymentWhereInput
  phone: String
  phone_contains: String
  phone_ends_with: String
  phone_gt: String
  phone_gte: String
  phone_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_not: String
  phone_not_contains: String
  phone_not_ends_with: String
  phone_not_in: [String!]
  phone_not_starts_with: String
  phone_starts_with: String
  quotations_every: QuotationWhereInput
  quotations_none: QuotationWhereInput
  quotations_some: QuotationWhereInput
  runningId: Int
  runningId_gt: Int
  runningId_gte: Int
  runningId_in: [Int!]
  runningId_lt: Int
  runningId_lte: Int
  runningId_not: Int
  runningId_not_in: [Int!]
  shoppingCart: ShoppingCartWhereInput
  type: String
  type_contains: String
  type_ends_with: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_ends_with: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
