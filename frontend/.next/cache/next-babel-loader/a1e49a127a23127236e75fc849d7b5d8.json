{"ast":null,"code":"import { ApolloClient, ApolloLink, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\nconst uri = true ? \"http://localhost:4000\" : \"http://54.255.196.44:4000\";\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n  fetch: fetch\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  const token = localStorage.getItem(\"user_token\"); // Use the setContext method to set the HTTP headers.\n\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  // Chain it with the HttpLink\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/Users/nutchanonploypray/work/gypstore/frontend/src/apollo-client.ts"],"names":["ApolloClient","ApolloLink","InMemoryCache","fetch","createHttpLink","uri","httpLink","authLink","operation","forward","token","localStorage","getItem","setContext","headers","authorization","client","link","concat","cache"],"mappings":"AAAA,SACEA,YADF,EAEEC,UAFF,EAGEC,aAHF,QAKO,cALP;AAMA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,MAAMC,GAAG,GACP,OACI,uBADJ,GAEI,2BAHN;AAKA,MAAMC,QAAQ,GAAGF,cAAc,CAAC;AAAEC,EAAAA,GAAG,EAAE,UAAP;AAAmBF,EAAAA,KAAK,EAAEA;AAA1B,CAAD,CAA/B;AAEA,MAAMI,QAAQ,GAAG,IAAIN,UAAJ,CAAe,CAACO,SAAD,EAAYC,OAAZ,KAAwB;AACtD;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd,CAFsD,CAItD;;AACAJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AADU,GAArB,EALsD,CAWtD;;AACA,SAAOD,OAAO,CAACD,SAAD,CAAd;AACD,CAbgB,CAAjB;AAeA,MAAMQ,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BiB,EAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBZ,QAAhB,CADwB;AACG;AACjCa,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAec,MAAf","sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  InMemoryCache,\n  HttpLink\n} from \"apollo-boost\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\nconst uri =\n  process.env.NODE_ENV !== \"production\"\n    ? \"http://localhost:4000\"\n    : \"http://54.255.196.44:4000\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\", fetch: fetch });\n\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  const token = localStorage.getItem(\"user_token\");\n\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  });\n\n  // Call the next link in the middleware chain.\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink), // Chain it with the HttpLink\n  cache: new InMemoryCache()\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}