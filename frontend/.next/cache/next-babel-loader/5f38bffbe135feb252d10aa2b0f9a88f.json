{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styled from \"@emotion/styled\";\nimport { Button, Form, Input, Tooltip, Icon, message } from \"antd\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"./gql\";\nimport { useRouter } from \"next/router\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  padding-top: 4rem;\n  max-width: 25rem;\n  margin: auto;\n  .ant-btn-primary {\n    background-color: #ff8e0a;\n    border-color: #ff8e0a;\n    &:hover {\n      background-color: #ffa53b;\n      border-color: #ffa53b;\n    }\n  }\n`;\n\nfunction SignUp(props) {\n  const {\n    getFieldDecorator,\n    validateFields\n  } = props.form;\n  const router = useRouter();\n  const {\n    0: confirmDirty,\n    1: setConfirmDirty\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [register] = useMutation(REGISTER);\n\n  const createUser = async ({\n    nickname,\n    email,\n    password,\n    phone\n  }) => {\n    try {\n      var _res$data;\n\n      setLoading(true);\n      const res = await register({\n        variables: {\n          name: nickname,\n          type: \"Admin\",\n          email,\n          password,\n          phone\n        }\n      });\n      const {\n        token\n      } = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.register;\n      localStorage.setItem(\"userToken\", token);\n      router.push(\"/\");\n      message.success(\"Register Completed\");\n    } catch (error) {\n      message.error(`${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await validateFields(async (err, values) => {\n      if (!err) {\n        await createUser(values);\n      } else console.log(\"eeeee\", err);\n    });\n  };\n\n  const handleConfirmBlur = e => {\n    const {\n      value\n    } = e.target;\n    {\n      setConfirmDirty(confirmDirty || !!value);\n    }\n  }; // const validateToNextPassword = (rule, value, callback) => {\n  //   const { form } = this.props;\n  //   if (value && confirmDirty) {\n  //     form.validateFields([\"\"], { force: true });\n  //   }\n  //   callback();\n  // };\n  // const compareToFirstPassword = (rule, value, callback) => {\n  //   const { form } = this.props;\n  //   console.log(value);\n  //   if (value && value !== form.getFieldValue(\"password\")) {\n  //     callback(\"กรุณากรอกรหัสผ่านให้ตรงกัน\");\n  //   } else {\n  //     callback();\n  //   }\n  // };\n\n\n  return __jsx(Container, null, __jsx(\"h1\", null, \"\\u0E25\\u0E07\\u0E17\\u0E30\\u0E40\\u0E1A\\u0E35\\u0E22\\u0E19\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Item, {\n    label: __jsx(\"span\", null, \"\\u0E0A\\u0E37\\u0E48\\u0E2D\\xA0\", __jsx(Tooltip, {\n      title: \"\\u0E2D\\u0E22\\u0E32\\u0E01\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E23\\u0E32\\u0E40\\u0E23\\u0E35\\u0E22\\u0E01\\u0E04\\u0E38\\u0E13\\u0E27\\u0E48\\u0E32\\u0E2D\\u0E30\\u0E44\\u0E23?\"\n    }, __jsx(Icon, {\n      type: \"question-circle-o\"\n    })))\n  }, getFieldDecorator(\"nickname\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาใส่ชื่อที่แสดง\",\n      whitespace: true\n    }]\n  })(__jsx(Input, null))), __jsx(Form.Item, {\n    label: \"\\u0E2D\\u0E35\\u0E40\\u0E21\\u0E25\"\n  }, getFieldDecorator(\"email\", {\n    rules: [{\n      type: \"email\",\n      message: \"อีเมลไม่ถูกต้อง\"\n    }, {\n      required: true,\n      message: \"กรุณาระบุอีเมล\"\n    }]\n  })(__jsx(Input, null))), __jsx(Form.Item, {\n    label: \"\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\"\n  }, getFieldDecorator(\"password\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาระบุรหัสผ่าน\"\n    }]\n  })(__jsx(Input.Password, null))), __jsx(Form.Item, {\n    label: \"\\u0E22\\u0E37\\u0E19\\u0E22\\u0E31\\u0E19\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\",\n    hasFeedback: true\n  }, getFieldDecorator(\"confirm\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาระบุยืนยันรหัสผ่าน\"\n    }]\n  })(__jsx(Input.Password, {\n    onBlur: handleConfirmBlur\n  }))), __jsx(Form.Item, {\n    label: \"\\u0E40\\u0E1A\\u0E2D\\u0E23\\u0E4C\\u0E42\\u0E17\\u0E23\\u0E28\\u0E31\\u0E1E\\u0E17\\u0E4C\"\n  }, getFieldDecorator(\"phone\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาใส่เบอร์ติดต่อ\"\n    }]\n  })(__jsx(Input, {\n    style: {\n      width: \"100%\"\n    }\n  }))), __jsx(Form.Item, null, __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: handleSubmit\n  }, \"\\u0E25\\u0E07\\u0E17\\u0E30\\u0E40\\u0E1A\\u0E35\\u0E22\\u0E19\"))));\n}\n\nexport default Form.create()(SignUp);","map":null,"metadata":{},"sourceType":"module"}