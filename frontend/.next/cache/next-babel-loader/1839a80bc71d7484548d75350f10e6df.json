{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 80%;\\n  padding-top: 4rem;\\n  max-width: 25rem;\\n  margin: auto;\\n  .ant-btn-primary {\\n    background-color: #ff8e0a;\\n    border-color: #ff8e0a;\\n    &:hover {\\n      background-color: #ffa53b;\\n      border-color: #ffa53b;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from \"@emotion/styled\";\nimport { Button, Form, Input, Tooltip, Icon, message } from \"antd\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"./gql\";\nimport { useRouter } from \"next/router\";\nvar Container = styled.div(_templateObject());\n\nfunction SignUp(props) {\n  var _props$form = props.form,\n      getFieldDecorator = _props$form.getFieldDecorator,\n      validateFields = _props$form.validateFields;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      confirmDirty = _useState[0],\n      setConfirmDirty = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useMutation = useMutation(REGISTER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      register = _useMutation2[0];\n\n  var createUser = function createUser(_ref) {\n    var nickname, email, password, phone, _res$data, res, _ref2, token;\n\n    return _regeneratorRuntime.async(function createUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nickname = _ref.nickname, email = _ref.email, password = _ref.password, phone = _ref.phone;\n            _context.prev = 1;\n            setLoading(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(register({\n              variables: {\n                name: nickname,\n                type: \"Admin\",\n                email: email,\n                password: password,\n                phone: phone\n              }\n            }));\n\n          case 5:\n            res = _context.sent;\n            _ref2 = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.register, token = _ref2.token;\n            localStorage.setItem(\"userToken\", token);\n            router.push(\"/\");\n            message.success(\"Register Completed\");\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            message.error(\"\".concat(_context.t0));\n\n          case 15:\n            _context.prev = 15;\n            setLoading(false);\n            return _context.finish(15);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 12, 15, 18]]);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    return _regeneratorRuntime.async(function handleSubmit$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            e.preventDefault();\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(validateFields(function _callee(err, values) {\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (err) {\n                        _context2.next = 5;\n                        break;\n                      }\n\n                      _context2.next = 3;\n                      return _regeneratorRuntime.awrap(createUser(values));\n\n                    case 3:\n                      _context2.next = 6;\n                      break;\n\n                    case 5:\n                      console.log(\"eeeee\", err);\n\n                    case 6:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              });\n            }));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  };\n\n  var handleConfirmBlur = function handleConfirmBlur(e) {\n    var value = e.target.value;\n    {\n      setConfirmDirty(confirmDirty || !!value);\n    }\n  }; // const validateToNextPassword = (rule, value, callback) => {\n  //   const { form } = this.props;\n  //   if (value && confirmDirty) {\n  //     form.validateFields([\"\"], { force: true });\n  //   }\n  //   callback();\n  // };\n  // const compareToFirstPassword = (rule, value, callback) => {\n  //   const { form } = this.props;\n  //   console.log(value);\n  //   if (value && value !== form.getFieldValue(\"password\")) {\n  //     callback(\"กรุณากรอกรหัสผ่านให้ตรงกัน\");\n  //   } else {\n  //     callback();\n  //   }\n  // };\n\n\n  return __jsx(Container, null, __jsx(\"h1\", null, \"\\u0E25\\u0E07\\u0E17\\u0E30\\u0E40\\u0E1A\\u0E35\\u0E22\\u0E19\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Item, {\n    label: __jsx(\"span\", null, \"\\u0E0A\\u0E37\\u0E48\\u0E2D\\xA0\", __jsx(Tooltip, {\n      title: \"\\u0E2D\\u0E22\\u0E32\\u0E01\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E23\\u0E32\\u0E40\\u0E23\\u0E35\\u0E22\\u0E01\\u0E04\\u0E38\\u0E13\\u0E27\\u0E48\\u0E32\\u0E2D\\u0E30\\u0E44\\u0E23?\"\n    }, __jsx(Icon, {\n      type: \"question-circle-o\"\n    })))\n  }, getFieldDecorator(\"nickname\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาใส่ชื่อที่แสดง\",\n      whitespace: true\n    }]\n  })(__jsx(Input, null))), __jsx(Form.Item, {\n    label: \"\\u0E2D\\u0E35\\u0E40\\u0E21\\u0E25\"\n  }, getFieldDecorator(\"email\", {\n    rules: [{\n      type: \"email\",\n      message: \"อีเมลไม่ถูกต้อง\"\n    }, {\n      required: true,\n      message: \"กรุณาระบุอีเมล\"\n    }]\n  })(__jsx(Input, null))), __jsx(Form.Item, {\n    label: \"\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\"\n  }, getFieldDecorator(\"password\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาระบุรหัสผ่าน\"\n    }]\n  })(__jsx(Input.Password, null))), __jsx(Form.Item, {\n    label: \"\\u0E22\\u0E37\\u0E19\\u0E22\\u0E31\\u0E19\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\",\n    hasFeedback: true\n  }, getFieldDecorator(\"confirm\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาระบุยืนยันรหัสผ่าน\"\n    }]\n  })(__jsx(Input.Password, {\n    onBlur: handleConfirmBlur\n  }))), __jsx(Form.Item, {\n    label: \"\\u0E40\\u0E1A\\u0E2D\\u0E23\\u0E4C\\u0E42\\u0E17\\u0E23\\u0E28\\u0E31\\u0E1E\\u0E17\\u0E4C\"\n  }, getFieldDecorator(\"phone\", {\n    rules: [{\n      required: true,\n      message: \"กรุณาใส่เบอร์ติดต่อ\"\n    }]\n  })(__jsx(Input, {\n    style: {\n      width: \"100%\"\n    }\n  }))), __jsx(Form.Item, null, __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: handleSubmit\n  }, \"\\u0E25\\u0E07\\u0E17\\u0E30\\u0E40\\u0E1A\\u0E35\\u0E22\\u0E19\"))));\n}\n\nexport default Form.create()(SignUp);","map":null,"metadata":{},"sourceType":"module"}