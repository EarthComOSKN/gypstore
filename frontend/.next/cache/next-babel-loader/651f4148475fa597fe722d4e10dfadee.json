{"ast":null,"code":"import ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport fetch from 'isomorphic-unfetch';\nimport { createHttpLink } from 'apollo-link-http';\nconst uri = true ? 'http://localhost:4000' : 'http://54.255.196.44:4000';\nconst httpLink = createHttpLink({\n  uri,\n  fetch: !false && fetch\n});\nconst requestLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  const token = localStorage.getItem('userToken'); // Use the setContext method to set the HTTP headers.\n\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/Users/nutchanonploypray/work/gypstore/frontend/src/apollo-client.ts"],"names":["ApolloClient","InMemoryCache","ApolloLink","fetch","createHttpLink","uri","httpLink","requestLink","operation","forward","token","localStorage","getItem","setContext","headers","authorization","client","link","cache"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAGA,SAASC,UAAT,QAAmC,aAAnC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,MAAMC,GAAG,GACP,OACI,uBADJ,GAEI,2BAHN;AAKA,MAAMC,QAAQ,GAAGF,cAAc,CAAC;AAAEC,EAAAA,GAAF;AAAOF,EAAAA,KAAK,EAAE,UAAoBA;AAAlC,CAAD,CAA/B;AAEA,MAAMI,WAAW,GAAG,IAAIL,UAAJ,CAAe,CAACM,SAAD,EAAYC,OAAZ,KAAwB;AACzD;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd,CAFyD,CAIzD;;AACAJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AADU,GAArB,EALyD,CAWzD;;AACA,SAAOD,OAAO,CAACD,SAAD,CAAd;AACD,CAbmB,CAApB;AAeA,MAAMQ,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BiB,EAAAA,IAAI,EAAEX,QADwB;AAE9BY,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAee,MAAf","sourcesContent":["import ApolloClient from 'apollo-boost'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink, concat } from 'apollo-link'\nimport fetch from 'isomorphic-unfetch'\n\nimport { createHttpLink } from 'apollo-link-http'\nconst uri =\n  process.env.NODE_ENV !== 'production'\n    ? 'http://localhost:4000'\n    : 'http://54.255.196.44:4000'\n\nconst httpLink = createHttpLink({ uri, fetch: !process.browser && fetch })\n\nconst requestLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  const token = localStorage.getItem('userToken')\n\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  })\n\n  // Call the next link in the middleware chain.\n  return forward(operation)\n})\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n})\n\nexport default client\n"]},"metadata":{},"sourceType":"module"}