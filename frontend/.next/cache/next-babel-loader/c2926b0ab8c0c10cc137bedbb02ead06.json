{"ast":null,"code":"var _jsxFileName = \"/Users/puwong/Developer/senior/gypstore/frontend/src/component/SignUp.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { FormInput } from \"../component/FormInput\"\nimport styled from \"@emotion/styled\";\nimport { Form, Input } from \"antd\";\nimport { useState } from \"react\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n  margin: 30px 0px;\n  align-items: center;\n  \n`; // const title = styled.div`\n//   margin: 10px 0;\n// `;\n// const [inputs, setInputs] = useState({ \n//   displayName: '',\n//   email: '',\n//   password: '',\n//   confirmPassword: ''}\n// );\n// const handleChange = (event) => {\n//   const { name, value } = event.target;\n//   setInputs(inputs => ({ ...inputs, [name]: value}));\n// };\n\nfunction SignUp(props) {\n  const {\n    getFieldDecorator\n  } = props.form;\n  const {\n    0: confirmDirty,\n    1: setConfirmDirty\n  } = useState(false);\n  const {\n    0: autoCompleteResult,\n    1: setAutoCompleteResult\n  } = useState([]);\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 8\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 16\n      }\n    }\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0\n      },\n      sm: {\n        span: 16,\n        offset: 8\n      }\n    }\n  };\n\n  const handleConfirmBlur = e => {\n    const {\n      value\n    } = e.target;\n    {\n      setConfirmDirty(confirmDirty || !!value);\n    }\n    ;\n  };\n\n  const compareToFirstPassword = (rule, value, callback) => {\n    const {\n      form\n    } = this.props;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('กรุณากรอกรหัสผ่านให้ตรงกัน');\n    } else {\n      callback();\n    }\n  };\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    label: \"\\u0E2D\\u0E35\\u0E40\\u0E21\\u0E25\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  })(__jsx(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    label: \"\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }]\n  })(__jsx(Input.Password, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    label: \"\\u0E22\\u0E37\\u0E19\\u0E22\\u0E31\\u0E19\\u0E23\\u0E2B\\u0E31\\u0E2A\\u0E1C\\u0E48\\u0E32\\u0E19\",\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, getFieldDecorator('confirm', {\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }]\n  })(__jsx(Input.Password, {\n    onBlur: this.handleConfirmBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })))));\n}\n\nexport default Form.create()(SignUp);","map":{"version":3,"sources":["/Users/puwong/Developer/senior/gypstore/frontend/src/component/SignUp.tsx"],"names":["styled","Form","Input","useState","Container","div","SignUp","props","getFieldDecorator","form","confirmDirty","setConfirmDirty","autoCompleteResult","setAutoCompleteResult","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","handleConfirmBlur","e","value","target","compareToFirstPassword","rule","callback","getFieldValue","rules","type","message","required","create"],"mappings":"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","sourcesContent":["// import { FormInput } from \"../component/FormInput\"\nimport styled from \"@emotion/styled\";\nimport { \n  Button, \n  Form, \n  Input, \n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  AutoComplete, } from \"antd\";\nimport { useState } from \"react\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n  margin: 30px 0px;\n  align-items: center;\n  \n`;\n\n// const title = styled.div`\n//   margin: 10px 0;\n// `;\n\n// const [inputs, setInputs] = useState({ \n//   displayName: '',\n//   email: '',\n//   password: '',\n//   confirmPassword: ''}\n// );\n\n// const handleChange = (event) => {\n//   const { name, value } = event.target;\n\n//   setInputs(inputs => ({ ...inputs, [name]: value}));\n// };\n\nfunction SignUp(props) {\n  const { getFieldDecorator } = props.form;\n\n  const [confirmDirty, setConfirmDirty] = useState(false);\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 },\n    },\n  };\n  \n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 16,\n        offset: 8,\n      },\n    },\n  };\n\n  const handleConfirmBlur = e => {\n    const { value } = e.target;\n    {setConfirmDirty(confirmDirty || !!value)};\n  };\n\n  const compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('กรุณากรอกรหัสผ่านให้ตรงกัน');\n    } else {\n      callback();\n    }\n  };\n\n  return (\n    <Container>\n      {/* <h2 className='title'>ฉันยังไม่เป็นสมาชิก</h2>\n      <span>สมัครสมาชิกด้วยอีเมล</span>\n      <form>\n        <FormInput\n          type='text'\n          name='displayName'\n          value={inputs.displayName}\n          onChange={this.handleChange}\n          label={'Display Name'}\n          required\n        />\n        <FormInput\n          type='email'\n          name='email'\n          value={inputs.email}\n          onChange={handleChange}\n          label={'Email'}\n          required\n        />\n        <FormInput\n          type='password'\n          name='password'\n          value={inputs.password}\n          onChange={handleChange}\n          label={'Password'}\n          required\n        />  \n        <FormInput\n          type='password'\n          name='confirmPassword'\n          value={inputs.confirmPassword}\n          onChange={handleChange}\n          label={'Confirm Password'}\n          required\n        />\n        <Button>SIGN UP</Button>\n      </form> */}\n\n      <Form>\n        <Form.Item label=\"อีเมล\">\n          {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!',\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!',\n                },\n              ],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"รหัสผ่าน\">\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ],\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"ยืนยันรหัสผ่าน\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!',\n              },\n            ],\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n      </Form>\n    </Container>\n  );\n}\n\nexport default Form.create()(SignUp);"]},"metadata":{},"sourceType":"module"}